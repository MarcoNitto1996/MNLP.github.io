{"ast":null,"code":"var _jsxFileName = \"/Users/francescociano/Desktop/Coding/Burotha/Projects/LandingPage/lending_page_marco_nitto/landing-page-mn/src/components/Bits/CountUp/CountUp.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { useInView, useMotionValue, useSpring } from \"framer-motion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CountUp({\n  to,\n  from = 0,\n  direction = \"up\",\n  delay = 0,\n  duration = 2,\n  // Duration of the animation in seconds\n  className = \"\",\n  startWhen = true,\n  separator = \"\",\n  onStart,\n  onEnd\n}) {\n  _s();\n  const ref = useRef(null);\n  const motionValue = useMotionValue(direction === \"down\" ? to : from);\n\n  // Calculate damping and stiffness based on duration\n  const damping = 20 + 40 * (1 / duration); // Adjust this formula for finer control\n  const stiffness = 100 * (1 / duration); // Adjust this formula for finer control\n\n  const springValue = useSpring(motionValue, {\n    damping,\n    stiffness\n  });\n  const isInView = useInView(ref, {\n    once: true,\n    margin: \"0px\"\n  });\n\n  // Set initial text content to the initial value based on direction\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.textContent = String(direction === \"down\" ? to : from);\n    }\n  }, [from, to, direction]);\n\n  // Start the animation when in view and startWhen is true\n  useEffect(() => {\n    if (isInView && startWhen) {\n      if (typeof onStart === \"function\") {\n        onStart();\n      }\n      const timeoutId = setTimeout(() => {\n        motionValue.set(direction === \"down\" ? from : to);\n      }, delay * 1000);\n      const durationTimeoutId = setTimeout(() => {\n        if (typeof onEnd === \"function\") {\n          onEnd();\n        }\n      }, delay * 1000 + duration * 1000);\n      return () => {\n        clearTimeout(timeoutId);\n        clearTimeout(durationTimeoutId);\n      };\n    }\n  }, [isInView, startWhen, motionValue, direction, from, to, delay, onStart, onEnd, duration]);\n\n  // Update text content with formatted number on spring value change\n  useEffect(() => {\n    const unsubscribe = springValue.on(\"change\", latest => {\n      if (ref.current) {\n        const options = {\n          useGrouping: !!separator,\n          minimumFractionDigits: 0,\n          maximumFractionDigits: 0\n        };\n        const formattedNumber = Intl.NumberFormat(\"en-US\", options).format(Number(latest.toFixed(0)));\n        ref.current.textContent = separator ? formattedNumber.replace(/,/g, separator) : formattedNumber;\n      }\n    });\n    return () => unsubscribe();\n  }, [springValue, separator]);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: `${className}`,\n    ref: ref\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 12\n  }, this);\n}\n_s(CountUp, \"iBmE4c3O6wHxybOolMOkPOdZI1U=\", false, function () {\n  return [useMotionValue, useSpring, useInView];\n});\n_c = CountUp;\nvar _c;\n$RefreshReg$(_c, \"CountUp\");","map":{"version":3,"names":["useEffect","useRef","useInView","useMotionValue","useSpring","jsxDEV","_jsxDEV","CountUp","to","from","direction","delay","duration","className","startWhen","separator","onStart","onEnd","_s","ref","motionValue","damping","stiffness","springValue","isInView","once","margin","current","textContent","String","timeoutId","setTimeout","set","durationTimeoutId","clearTimeout","unsubscribe","on","latest","options","useGrouping","minimumFractionDigits","maximumFractionDigits","formattedNumber","Intl","NumberFormat","format","Number","toFixed","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/francescociano/Desktop/Coding/Burotha/Projects/LandingPage/lending_page_marco_nitto/landing-page-mn/src/components/Bits/CountUp/CountUp.tsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { useInView, useMotionValue, useSpring } from \"framer-motion\";\n\ninterface CountUpProps {\n    to: number;\n    from?: number;\n    direction?: \"up\" | \"down\";\n    delay?: number;\n    duration?: number;\n    className?: string;\n    startWhen?: boolean;\n    separator?: string;\n    onStart?: () => void;\n    onEnd?: () => void;\n}\n\nexport default function CountUp({\n    to,\n    from = 0,\n    direction = \"up\",\n    delay = 0,\n    duration = 2, // Duration of the animation in seconds\n    className = \"\",\n    startWhen = true,\n    separator = \"\",\n    onStart,\n    onEnd,\n}: CountUpProps) {\n    const ref = useRef<HTMLSpanElement>(null);\n    const motionValue = useMotionValue(direction === \"down\" ? to : from);\n\n    // Calculate damping and stiffness based on duration\n    const damping = 20 + 40 * (1 / duration); // Adjust this formula for finer control\n    const stiffness = 100 * (1 / duration);   // Adjust this formula for finer control\n\n    const springValue = useSpring(motionValue, {\n        damping,\n        stiffness,\n    });\n\n    const isInView = useInView(ref, { once: true, margin: \"0px\" });\n\n    // Set initial text content to the initial value based on direction\n    useEffect(() => {\n        if (ref.current) {\n            ref.current.textContent = String(direction === \"down\" ? to : from);\n        }\n    }, [from, to, direction]);\n\n    // Start the animation when in view and startWhen is true\n    useEffect(() => {\n        if (isInView && startWhen) {\n            if (typeof onStart === \"function\") {\n                onStart();\n            }\n\n            const timeoutId = setTimeout(() => {\n                motionValue.set(direction === \"down\" ? from : to);\n            }, delay * 1000);\n\n            const durationTimeoutId = setTimeout(() => {\n                if (typeof onEnd === \"function\") {\n                    onEnd();\n                }\n            }, delay * 1000 + duration * 1000);\n\n            return () => {\n                clearTimeout(timeoutId);\n                clearTimeout(durationTimeoutId);\n            };\n        }\n    }, [isInView, startWhen, motionValue, direction, from, to, delay, onStart, onEnd, duration]);\n\n    // Update text content with formatted number on spring value change\n    useEffect(() => {\n        const unsubscribe = springValue.on(\"change\", (latest) => {\n            if (ref.current) {\n                const options = {\n                    useGrouping: !!separator,\n                    minimumFractionDigits: 0,\n                    maximumFractionDigits: 0,\n                };\n\n                const formattedNumber = Intl.NumberFormat(\"en-US\", options).format(\n                    Number(latest.toFixed(0))\n                );\n\n                ref.current.textContent = separator\n                    ? formattedNumber.replace(/,/g, separator)\n                    : formattedNumber;\n            }\n        });\n\n        return () => unsubscribe();\n    }, [springValue, separator]);\n\n    return <span className={`${className}`} ref={ref} />;\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}