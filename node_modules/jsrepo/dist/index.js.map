{"version":3,"sources":["../src/utils/ascii.ts","../src/utils/blocks/utils/map-to-array.ts","../src/utils/config.ts","../src/utils/parse-package-name.ts","../src/utils/build/check.ts","../src/utils/registry-providers/internal.ts","../src/utils/persisted.ts","../src/utils/blocks.ts","../src/utils/blocks/utils/strip-ansi.ts","../src/utils/blocks/utils/pad.ts","../src/utils/blocks/utils/lines.ts","../src/utils/package.ts","../src/utils/language-support.ts","../src/utils/build/index.ts","../src/utils/dependencies.ts","../src/utils/blocks/package-managers/flags.ts","../src/utils/files.ts","../src/utils/format.ts","../src/utils/get-watermark.ts","../src/utils/prompts.ts","../src/commands/add.ts","../src/commands/auth.ts","../src/commands/build.ts","../src/commands/exec.ts","../src/commands/init.ts","../src/commands/test.ts","../src/utils/ai.ts","../src/utils/blocks/utils/array-sum.ts","../src/utils/diff.ts","../src/commands/update.ts","../src/utils/get-latest-version.ts","../src/cli.ts","../src/index.ts"],"names":["VERTICAL_LINE","color","HORIZONTAL_LINE","TOP_RIGHT_CORNER","BOTTOM_RIGHT_CORNER","JUNCTION_RIGHT","TOP_LEFT_CORNER","BOTTOM_LEFT_CORNER","WARN","INFO","ERROR","JSREPO","mapToArray","map","fn","items","key","value","RE_SCOPED","RE_NON_SCOPED","parsePackageName","input","m","Ok","Err","ruleLevelSchema","V","rules","block","errors","dep","manifest","depCategoryName","depBlockName","depCategory","cat","error","b","categoryName","name","category","options","limit","specifier","chain","searchForDep","listedBlocks","FRAMEWORKS","frameworkDeps","d","frameworkDep","ruleKeySchema","ruleConfigSchema","DEFAULT_CONFIG","runRules","config","ruleConfig","warnings","rule","conf","level","ruleErrors","err","search","categories","newChain","blockName","depBlock","found","isDependedOn","PROJECT_CONFIG_NAME","REGISTRY_CONFIG_NAME","formatterSchema","pathsSchema","projectConfigSchema","getProjectConfig","cwd","fs","path","registryConfigSchema","manifestMeta","getRegistryConfig","resolvePaths","paths","getTsconfig","matcher","createPathsMatcher","newPaths","resolvePath","p","unresolvedPath","getPathForBlock","resolvedPaths","directory","get","Conf","internalFetchRaw","state","resourcePath","verbose","fetchRaw","nodeFetch","getProviderToken","internalFetchManifest","fetchManifest","provider","token","getProviderState","repo","selectProvider","providers","i","forEachPathGetProviderState","repos","getProviderResult","providerState","fetchBlocks","blocksMap","getManifestResult","join","resolveTree","blockSpecifiers","repoPaths","installed","blocks","blockSpecifier","repoIdent","tempBlock","subDeps","_","val","getInstalled","installedBlocks","resolvedPathsResult","program","baseDir","blockPath","stripAsni","str","ansiRegex","leftPadMin","length","padWith","NEW_LINE_REGEX","lines","lineNumbers","prefix","transformed","line","os","findNearestPackageJson","startDir","until","packagePath","segments","getPackage","contents","cleanVersion","version","returnShouldInstall","dependencies","devDependencies","tempDeps","tempDevDeps","packageResult","pkg","foundDep","semver","css","fileName","content","code","formatter","prettierOptions","biomeOptions","filePath","biome","Biome","Distribution","html","isSubDir","excludeDeps","dirs","containingDir","sourceCode","ast","imports","walk","node","enter","n","attr","resolveResult","resolveImports","formatError","json","jsonc","sass","svelte","root","modules","plugin","svg","typescript","blockFile","Project","imp","exps","vue","parsed","compiled","yaml","l","moduleSpecifiers","doNotInstall","deps","localDeps","localDep","resolveLocalImport","tryResolveLocalAlias","resolveRemoteDeps","mod","dropExtension","alias","categoryDir","modPath","fullDir","parsePath","dir","containingPath","absPath","localPath","rest","trimmedBlock","template","foundMod","searchForModule","pathResolved","shouldDropExtension","resolutionEquality","pathA","pathB","validExtensions","parsedA","parsedB","pathAWithoutExtension","pathBWithoutExtension","containing","modParsed","newPath","files","file","fileParsed","prettyPath","exemptDeps","filteredDeps","builtinModules","pkgPath","packageDevDependencies","packageDependencies","depInfo","validatePackageName","languages","TEST_SUFFIXES","isTestFile","suffix","buildBlocksDirectory","blocksPath","ignore","categoryPath","dirName","shouldIncludeCategory","listCategory","shouldListCategory","blockDir","transformBlockName","listBlock","shouldListBlock","shouldIncludeBlock","lang","resolver","testsPath","f","local","localDepsSet","depsSet","devDepsSet","hasTests","blockFiles","walkFiles","base","relativeFilePath","subFiles","imps","k","v","pruneUnused","pruned","catBlocks","bun","deno","npm","pnpm","yarn","flags","installDependencies","pm","dev","ignoreWorkspace","args","noWorkspace","add","resolveCommand","execa","templatePattern","resolveLocalDependencyTemplate","destPath","destDir","relative","transformRemoteContent","watermark","literal","resolvedImport","literalRegex","escapeStringRegexp","formatFile","newContent","loadFormatterConfig","co","configPath","getWatermark","repoUrl","runTasks","tasks","loading","spinner","task","runTasksConcurrently","startMessage","stopMessage","message","msg","t","boxenDefaultOptions","nextSteps","steps","box","boxen","truncatedList","maxLength","truncated","remaining","newerVersionAvailable","oldVersion","newVersion","detectSync","installCommand","text","_intro","intro","schema","ie","Command","blockNames","opts","context","_add","outro","configResult","noConfig","shouldContinue","response","confirm","isCancel","cancel","mustResolveRepos","resolveAllRepos","repoPath","result","resolvedRepos","installingBlockNames","promptResult","multiselect","shortName","blockExists","label","installingBlocks","detect","devDeps","store","zeroConfigKey","zeroConfigParsed","zeroConfig","includeTests","addWatermark","defaultFormatter","select","addedBlocks","overwriteAll","fullSpecifier","shortSpecifier","providerInfo","overwriteBlocks","installing","spec","log","overwrite","getSourceFile","sourceFile","sourcePath","pathFolder","requiredDependencies","install","cmd","step","next","$e","authProviders","http","auth","Option","_auth","storage","tokenKey","password","IGNORED_DIRS","S","build","MANIFEST_FILE","_build","mergedVal","outDir","manifestOut","oldManifest","parseManifest","newDirPath","ig","ignoreFile","dirPath","builtCategories","createManifest","warning","prunedCategories","count","originalPath","ue","exec","Argument","script","command","_exec","s","tempDirBase","tempDirectoryRelative","tempDirectory","packageContent","startIndex","arg","passthroughArgs","runningBlock","Y","init","registries","_initProject","_initRegistry","initialConfig","defaultPathResult","r","confirmResult","promptForProviderConfig","configContent","manifestResult","configurePaths","configuredValue","alreadyInstalled","installAsDevDependency","jsonConfig","buildScript","shouldInstall","runScript","ge","test","_test","tempTestDirectory","cleanUp","testingBlocks","testingBlocksMapped","parsedRepo","testFiles","testFile","project","tempFile","importDeclaration","moduleSpecifier","newModuleSpecifier","resolved","testCommand","models","originalFile","newFile","apiKey","getApiKey","prompt","createUpdatePrompt","getNextCompletionAnthropic","unwrapCodeFromQuotes","getNextCompletionOpenAI","getNextCompletionOllama","maxTokens","model","first","OpenAI","Anthropic","ollama","quoted","KEY","arraySum","arr","total","item","isWhitespace","trimSingleNewLine","formatDiff","from","to","changes","expand","maxUnchanged","colorRemoved","colorAdded","colorCharsRemoved","colorCharsAdded","onUnchanged","change","lineOffset","linePrefix","hasPreviousChange","hasNextChange","prevLineOffset","ls","shownLines","colorLineChange","colorCharChange","sentence","diffChars","chg","re","update","_update","updatingBlockNames","updatingBlocks","remoteContentResult","originalRemoteContent","remoteContent","acceptedChanges","localContent","diffLines","formattedDiff","totalChanges","a","modelResult","LATEST_VERSION_KEY","EXPIRATION_TIME","getLatestVersion","latestVersion","controller","timeout","ver","resolveRelativeToRoot","dirname","fileURLToPath","description","repository","cli"],"mappings":"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","file":"index.js","sourcesContent":["import color from 'chalk';\n\nexport const VERTICAL_LINE = color.gray('│');\nexport const HORIZONTAL_LINE = color.gray('─');\nexport const TOP_RIGHT_CORNER = color.gray('┐');\nexport const BOTTOM_RIGHT_CORNER = color.gray('┘');\nexport const JUNCTION_RIGHT = color.gray('├');\nexport const TOP_LEFT_CORNER = color.gray('┌');\nexport const BOTTOM_LEFT_CORNER = color.gray('└');\n\nexport const WARN = color.bgRgb(245, 149, 66).black(' WARN ');\nexport const INFO = color.bgBlueBright.white(' INFO ');\nexport const ERROR = color.bgRedBright.white(' ERROR ');\n\nexport const JSREPO = color.hex('#f7df1e')('jsrepo');\n","/*\n\tjsrepo 1.2.4\n\tInstalled from github/ieedan/std\n\t11-21-2024\n*/\n\n/** Maps the provided map into an array using the provided mapping function.\n *\n * @param map Map to be entered into an array\n * @param fn A mapping function to transform each pair into an item\n * @returns\n *\n * ## Example\n * ```ts\n * console.log(map); // Map(5) { 0 => 5, 1 => 4, 2 => 3, 3 => 2, 4 => 1 }\n *\n * const arr = mapToArray(map, (_, value) => value);\n *\n * console.log(arr); // [5, 4, 3, 2, 1]\n * ```\n */\nconst mapToArray = <K, V, T>(map: Map<K, V>, fn: (key: K, value: V) => T): T[] => {\n\tconst items: T[] = [];\n\n\tfor (const [key, value] of map) {\n\t\titems.push(fn(key, value));\n\t}\n\n\treturn items;\n};\n\nexport { mapToArray };\n","import fs from 'node:fs';\nimport { createPathsMatcher, getTsconfig } from 'get-tsconfig';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { type Block, manifestMeta } from '../types';\nimport { Err, Ok, type Result } from './blocks/types/result';\nimport { ruleConfigSchema } from './build/check';\n\nconst PROJECT_CONFIG_NAME = 'jsrepo.json';\nconst REGISTRY_CONFIG_NAME = 'jsrepo-build-config.json';\n\nconst formatterSchema = v.union([v.literal('prettier'), v.literal('biome')]);\n\nconst pathsSchema = v.objectWithRest(\n\t{\n\t\t'*': v.string(),\n\t},\n\tv.string()\n);\n\nexport type Paths = v.InferInput<typeof pathsSchema>;\n\nconst projectConfigSchema = v.object({\n\t$schema: v.string(),\n\trepos: v.optional(v.array(v.string()), []),\n\tincludeTests: v.boolean(),\n\tpaths: pathsSchema,\n\twatermark: v.optional(v.boolean(), true),\n\tformatter: v.optional(formatterSchema),\n});\n\nconst getProjectConfig = (cwd: string): Result<ProjectConfig, string> => {\n\tif (!fs.existsSync(path.join(cwd, PROJECT_CONFIG_NAME))) {\n\t\treturn Err('Could not find your configuration file! Please run `init`.');\n\t}\n\n\tconst config = v.safeParse(\n\t\tprojectConfigSchema,\n\t\tJSON.parse(fs.readFileSync(path.join(cwd, PROJECT_CONFIG_NAME)).toString())\n\t);\n\n\tif (!config.success) {\n\t\treturn Err(`There was an error reading your \\`${PROJECT_CONFIG_NAME}\\` file!`);\n\t}\n\n\treturn Ok(config.output);\n};\n\nexport type ProjectConfig = v.InferOutput<typeof projectConfigSchema>;\n\nexport type Formatter = v.InferOutput<typeof formatterSchema>;\n\nconst registryConfigSchema = v.object({\n\t$schema: v.string(),\n\tmeta: v.optional(manifestMeta),\n\tdirs: v.array(v.string()),\n\toutputDir: v.optional(v.string()),\n\tincludeBlocks: v.optional(v.array(v.string()), []),\n\tincludeCategories: v.optional(v.array(v.string()), []),\n\texcludeBlocks: v.optional(v.array(v.string()), []),\n\texcludeCategories: v.optional(v.array(v.string()), []),\n\tdoNotListBlocks: v.optional(v.array(v.string()), []),\n\tdoNotListCategories: v.optional(v.array(v.string()), []),\n\tlistBlocks: v.optional(v.array(v.string()), []),\n\tlistCategories: v.optional(v.array(v.string()), []),\n\texcludeDeps: v.optional(v.array(v.string()), []),\n\tallowSubdirectories: v.optional(v.boolean()),\n\tpreview: v.optional(v.boolean()),\n\trules: v.optional(ruleConfigSchema),\n});\n\nconst getRegistryConfig = (cwd: string): Result<RegistryConfig | null, string> => {\n\tif (!fs.existsSync(path.join(cwd, REGISTRY_CONFIG_NAME))) {\n\t\treturn Ok(null);\n\t}\n\n\tconst config = v.safeParse(\n\t\tregistryConfigSchema,\n\t\tJSON.parse(fs.readFileSync(path.join(cwd, REGISTRY_CONFIG_NAME)).toString())\n\t);\n\n\tif (!config.success) {\n\t\treturn Err(`There was an error reading your \\`${REGISTRY_CONFIG_NAME}\\` file!`);\n\t}\n\n\treturn Ok(config.output);\n};\n\nexport type RegistryConfig = v.InferOutput<typeof registryConfigSchema>;\n\n/** Resolves the paths relative to the cwd */\nconst resolvePaths = (paths: Paths, cwd: string): Result<Paths, string> => {\n\tlet config = getTsconfig(cwd, 'tsconfig.json');\n\tlet matcher: ((specifier: string) => string[]) | null = null;\n\n\tif (!config) {\n\t\t// if we don't find the config at first check for a jsconfig\n\t\tconfig = getTsconfig(cwd, 'jsconfig.json');\n\t}\n\n\tif (config) {\n\t\tmatcher = createPathsMatcher(config);\n\t}\n\n\tlet newPaths: Paths;\n\n\tif (!paths['*'].startsWith('.')) {\n\t\tif (matcher === null) {\n\t\t\treturn Err(\"Cannot resolve aliases because we couldn't find a tsconfig!\");\n\t\t}\n\n\t\tnewPaths = {\n\t\t\t'*': resolvePath(paths['*'], matcher, cwd),\n\t\t};\n\t} else {\n\t\tnewPaths = {\n\t\t\t'*': path.relative(cwd, path.join(path.resolve(cwd), paths['*'])),\n\t\t};\n\t}\n\n\tfor (const [category, p] of Object.entries(paths)) {\n\t\tif (category === '*') continue; // we already resolved this one\n\n\t\tif (p.startsWith('.')) {\n\t\t\tnewPaths[category] = path.relative(cwd, path.join(path.resolve(cwd), p));\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (matcher === null) {\n\t\t\treturn Err(\"Cannot resolve aliases because we couldn't find a tsconfig!\");\n\t\t}\n\n\t\tnewPaths[category] = resolvePath(p, matcher, cwd);\n\t}\n\n\treturn Ok(newPaths);\n};\n\nconst resolvePath = (\n\tunresolvedPath: string,\n\tmatcher: (specifier: string) => string[],\n\tcwd: string\n): string => {\n\tconst paths = matcher(unresolvedPath);\n\n\treturn path.relative(cwd, paths[0]);\n};\n\n/** Gets the path where the block should be installed.\n *\n * @param block\n * @param resolvedPaths\n * @param cwd\n * @returns\n */\nconst getPathForBlock = (block: Block, resolvedPaths: Paths, cwd: string): string => {\n\tlet directory: string;\n\n\tif (resolvedPaths[block.category] !== undefined) {\n\t\tdirectory = path.join(cwd, resolvedPaths[block.category]);\n\t} else {\n\t\tdirectory = path.join(cwd, resolvedPaths['*'], block.category);\n\t}\n\n\treturn directory;\n};\n\nexport {\n\tPROJECT_CONFIG_NAME,\n\tREGISTRY_CONFIG_NAME,\n\tgetProjectConfig,\n\tgetRegistryConfig,\n\tprojectConfigSchema,\n\tregistryConfigSchema,\n\tformatterSchema,\n\tresolvePaths,\n\tgetPathForBlock,\n};\n","/**\n * Adapted from https://github.com/egoist/parse-package-name/blob/main/src/index.ts\n * @module\n */\n\nimport { Err, Ok, type Result } from './blocks/types/result';\n\n// Parsed a scoped package name into name, version, and path.\nconst RE_SCOPED = /^(@[^\\/]+\\/[^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\n// Parsed a non-scoped package name into name, version, path\nconst RE_NON_SCOPED = /^([^@\\/]+)(?:@([^\\/]+))?(\\/.*)?$/;\n\nexport type Package = {\n\t/** Name of the package as it would be installed from npm */\n\tname: string;\n\t/** Version of the package */\n\tversion: string;\n\tpath: string;\n};\n\nconst parsePackageName = (input: string): Result<Package, string> => {\n\tconst m = RE_SCOPED.exec(input) || RE_NON_SCOPED.exec(input);\n\n\tif (!m) return Err(`invalid package name: ${input}`);\n\n\treturn Ok({\n\t\tname: m[1] || '',\n\t\tversion: m[2] || 'latest',\n\t\tpath: m[3] || '',\n\t});\n};\n\nexport { parsePackageName };\n","import color from 'chalk';\nimport * as v from 'valibot';\nimport type { Block, Category, Manifest } from '../../types';\nimport * as ascii from '../ascii';\nimport type { RegistryConfig } from '../config';\nimport { parsePackageName } from '../parse-package-name';\n\nconst ruleLevelSchema = v.union([v.literal('off'), v.literal('warn'), v.literal('error')]);\n\nexport type RuleLevel = v.InferInput<typeof ruleLevelSchema>;\n\nexport type CheckOptions = {\n\tmanifest: Manifest;\n\toptions: (string | number)[];\n\tconfig: RegistryConfig;\n};\n\nexport type Rule = {\n\tdescription: string;\n\tcheck: (block: Block, opts: CheckOptions) => string[] | undefined;\n};\n\nconst rules = {\n\t'no-unpinned-dependency': {\n\t\tdescription: 'Require all dependencies to have a pinned version.',\n\t\tcheck: (block) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tfor (const dep of [...block.dependencies, ...block.devDependencies]) {\n\t\t\t\tif (!dep.includes('@')) {\n\t\t\t\t\terrors.push(`Couldn't find a version to use for ${color.bold(dep)}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t} satisfies Rule,\n\t'require-local-dependency-exists': {\n\t\tdescription: 'Require all local dependencies to exist.',\n\t\tcheck: (block, { manifest }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tfor (const dep of block.localDependencies) {\n\t\t\t\tconst [depCategoryName, depBlockName] = dep.split('/');\n\n\t\t\t\tconst depCategory = manifest.categories.find(\n\t\t\t\t\t(cat) => cat.name.trim() === depCategoryName.trim()\n\t\t\t\t);\n\n\t\t\t\tconst error = `${color.bold(`${block.category}/${block.name}`)} depends on local dependency ${color.bold(dep)} which doesn't exist`;\n\n\t\t\t\tif (!depCategory) {\n\t\t\t\t\terrors.push(error);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (depCategory.blocks.find((b) => b.name === depBlockName) === undefined) {\n\t\t\t\t\terrors.push(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t} satisfies Rule,\n\t'no-category-index-file-dependency': {\n\t\tdescription: 'Disallow depending on the index file of a category.',\n\t\tcheck: (block, { manifest }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tfor (const dep of block.localDependencies) {\n\t\t\t\tconst [categoryName, name] = dep.split('/');\n\n\t\t\t\tif (name !== 'index') continue;\n\n\t\t\t\tconst category = manifest.categories.find((cat) => cat.name === categoryName);\n\n\t\t\t\tif (!category) continue;\n\n\t\t\t\tconst depBlock = category.blocks.find((b) => b.name === name);\n\n\t\t\t\tif (!depBlock) continue;\n\n\t\t\t\terrors.push(\n\t\t\t\t\t`${color.bold(`${block.category}/${block.name}`)} depends on ${color.bold(`${categoryName}/${name}`)}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t} satisfies Rule,\n\t'max-local-dependencies': {\n\t\tdescription: 'Enforces a limit on the amount of local dependencies a block can have.',\n\t\tcheck: (block, { options }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tlet limit: number;\n\n\t\t\tif (typeof options[0] !== 'number') {\n\t\t\t\tlimit = 5;\n\t\t\t} else {\n\t\t\t\tlimit = options[0];\n\t\t\t}\n\n\t\t\tif (block.localDependencies.length > limit) {\n\t\t\t\terrors.push(\n\t\t\t\t\t`${color.bold(`${block.category}/${block.name}`)} has too many local dependencies (${color.bold(block.localDependencies.length)}) limit (${color.bold(limit)})`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t} satisfies Rule,\n\t'no-circular-dependency': {\n\t\tdescription: 'Disallow circular dependencies.',\n\t\tcheck: (block, { manifest }) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\tconst specifier = `${block.category}/${block.name}`;\n\n\t\t\tconst chain = searchForDep(specifier, block, manifest.categories);\n\n\t\t\tif (chain) {\n\t\t\t\terrors.push(\n\t\t\t\t\t`There is a circular dependency in ${color.bold(specifier)}: ${color.bold(chain.join(' -> '))}`\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t} satisfies Rule,\n\t'no-unused-block': {\n\t\tdescription: 'Disallow unused blocks. (Not listed and not a dependency of another block)',\n\t\tcheck: (block, { manifest }) => {\n\t\t\tif (block.list) return;\n\n\t\t\tconst specifier = `${block.category}/${block.name}`;\n\n\t\t\tconst listedBlocks = manifest.categories\n\t\t\t\t.flatMap((cat) => cat.blocks)\n\t\t\t\t.filter((b) => b.list);\n\n\t\t\tfor (const block of listedBlocks) {\n\t\t\t\tconst chain = searchForDep(specifier, block, manifest.categories);\n\n\t\t\t\tif (chain) return;\n\t\t\t}\n\n\t\t\treturn [`${color.bold(specifier)} is unused and will be ${color.bold.red('removed')}`];\n\t\t},\n\t} satisfies Rule,\n\t'no-framework-dependency': {\n\t\tdescription: 'Disallow frameworks (Svelte, Vue, React) as dependencies.',\n\t\tcheck: (block) => {\n\t\t\tconst errors: string[] = [];\n\n\t\t\t// Update this list as needed\n\t\t\t// Use the name of the package not the framework\n\t\t\tconst FRAMEWORKS = new Set([\n\t\t\t\t// svelte\n\t\t\t\t'svelte',\n\t\t\t\t'@sveltejs/kit',\n\n\t\t\t\t// vue\n\t\t\t\t'vue',\n\t\t\t\t'nuxt',\n\n\t\t\t\t// react\n\t\t\t\t'react',\n\t\t\t\t'react-dom',\n\t\t\t\t'next',\n\t\t\t\t'@remix-run/react',\n\n\t\t\t\t// angular\n\t\t\t\t'@angular/core',\n\t\t\t\t'@angular/common',\n\t\t\t\t'@angular/forms',\n\t\t\t\t'@angular/platform-browser',\n\t\t\t\t'@angular/platform-browser-dynamic',\n\t\t\t\t'@angular/router',\n\n\t\t\t\t// misc\n\t\t\t\t'@builder.io/qwik',\n\t\t\t\t'astro',\n\t\t\t\t'solid-js',\n\t\t\t]);\n\n\t\t\tconst frameworkDeps = [...block.devDependencies, ...block.dependencies]\n\t\t\t\t.map((d) => parsePackageName(d).unwrap().name)\n\t\t\t\t.filter((d) => FRAMEWORKS.has(d));\n\n\t\t\tif (frameworkDeps.length > 0) {\n\t\t\t\tfor (const frameworkDep of frameworkDeps) {\n\t\t\t\t\terrors.push(\n\t\t\t\t\t\t`${color.bold(`${block.category}/${block.name}`)} depends on ${color.bold(frameworkDep)} causing it to be installed when added`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn errors.length > 0 ? errors : undefined;\n\t\t},\n\t} satisfies Rule,\n} as const;\n\nconst ruleKeySchema = v.union([\n\tv.literal('no-category-index-file-dependency'),\n\tv.literal('no-unpinned-dependency'),\n\tv.literal('require-local-dependency-exists'),\n\tv.literal('max-local-dependencies'),\n\tv.literal('no-circular-dependency'),\n\tv.literal('no-unused-block'),\n\tv.literal('no-framework-dependency'),\n]);\n\nexport type RuleKey = v.InferInput<typeof ruleKeySchema>;\n\nconst ruleConfigSchema = v.record(\n\truleKeySchema,\n\tv.union([\n\t\truleLevelSchema,\n\t\tv.tupleWithRest(\n\t\t\t[ruleLevelSchema, v.union([v.string(), v.number()])],\n\t\t\tv.union([v.string(), v.number()])\n\t\t),\n\t])\n);\n\nexport type RuleConfig = v.InferInput<typeof ruleConfigSchema>;\n\nconst DEFAULT_CONFIG: RuleConfig = {\n\t'no-category-index-file-dependency': 'warn',\n\t'no-unpinned-dependency': 'warn',\n\t'require-local-dependency-exists': 'error',\n\t'max-local-dependencies': ['warn', 10],\n\t'no-circular-dependency': 'error',\n\t'no-unused-block': 'warn',\n\t'no-framework-dependency': 'warn',\n} as const;\n\n/** Runs checks on the manifest file.\n *\n * @param manifest\n * @param config\n * @param ruleConfig\n * @returns\n */\nconst runRules = (\n\tmanifest: Manifest,\n\tconfig: RegistryConfig,\n\truleConfig: RuleConfig = DEFAULT_CONFIG\n): { warnings: string[]; errors: string[] } => {\n\tconst warnings: string[] = [];\n\tconst errors: string[] = [];\n\n\tfor (const category of manifest.categories) {\n\t\tfor (const block of category.blocks) {\n\t\t\tfor (const [name, rule] of Object.entries(rules)) {\n\t\t\t\tconst conf = ruleConfig[name as RuleKey]!;\n\n\t\t\t\tlet level: RuleLevel;\n\t\t\t\tconst options: (string | number)[] = [];\n\t\t\t\tif (Array.isArray(conf)) {\n\t\t\t\t\tlevel = conf[0];\n\t\t\t\t\toptions.push(...conf.slice(1));\n\t\t\t\t} else {\n\t\t\t\t\tlevel = conf;\n\t\t\t\t}\n\n\t\t\t\tif (level === 'off') continue;\n\n\t\t\t\tconst ruleErrors = rule.check(block, { manifest, options, config });\n\n\t\t\t\tif (!ruleErrors) continue;\n\n\t\t\t\tif (level === 'error') {\n\t\t\t\t\terrors.push(\n\t\t\t\t\t\t...ruleErrors.map(\n\t\t\t\t\t\t\t(err) =>\n\t\t\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.ERROR} ${color.red(err)} ${color.gray(name)}`\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\twarnings.push(\n\t\t\t\t\t...ruleErrors.map(\n\t\t\t\t\t\t(err) => `${ascii.VERTICAL_LINE}  ${ascii.WARN} ${err} ${color.gray(name)}`\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { warnings, errors };\n};\n\n/** Searches for the local dependency tree for the provided specifier returns the path it took to find the dependency */\nconst searchForDep = (\n\tsearch: string,\n\tblock: Block,\n\tcategories: Category[],\n\tchain: string[] = []\n): string[] | undefined => {\n\tconst newChain = [...chain, `${block.category}/${block.name}`];\n\n\tfor (const dep of block.localDependencies) {\n\t\tif (dep === search) return newChain;\n\n\t\t// it will be found in another pass but we don't want to get a stack overflow\n\t\tif (chain.includes(dep)) return undefined;\n\n\t\tconst [categoryName, blockName] = dep.split('/');\n\n\t\tconst depBlock = categories\n\t\t\t.find((cat) => cat.name === categoryName)\n\t\t\t?.blocks.find((b) => b.name === blockName);\n\n\t\tif (!depBlock) continue;\n\n\t\tconst found = searchForDep(search, depBlock, categories, newChain);\n\n\t\tif (found) return [...found, search];\n\t}\n\n\treturn undefined;\n};\n\n/** Checks if the provided block is depended on anywhere */\nconst isDependedOn = (specifier: string, categories: Category[]): boolean => {\n\tfor (const category of categories) {\n\t\tfor (const block of category.blocks) {\n\t\t\tif (!block.list) continue;\n\n\t\t\tconst chain = searchForDep(specifier, block, categories);\n\n\t\t\tif (chain) return true;\n\t\t}\n\t}\n\n\treturn false;\n};\n\nexport {\n\trules,\n\trunRules,\n\tDEFAULT_CONFIG,\n\truleLevelSchema,\n\truleConfigSchema,\n\truleKeySchema,\n\tsearchForDep,\n\tisDependedOn,\n};\n","import color from 'chalk';\nimport nodeFetch from 'node-fetch';\nimport {\n\thttp,\n\tazure,\n\tbitbucket,\n\tfetchManifest,\n\tfetchRaw,\n\tgithub,\n\tgitlab,\n\tproviders,\n\tselectProvider,\n} from '.';\nimport type { Block } from '../../types';\nimport { Err, Ok, type Result } from '../blocks/types/result';\nimport * as u from '../blocks/utils/url';\nimport * as persisted from '../persisted';\nimport type { RegistryProvider, RegistryProviderState } from './types';\n\nexport type RemoteBlock = Block & { sourceRepo: RegistryProviderState };\n\n/** Wraps the basic implementation to inject `node-fetch` and the correct token. */\nexport const internalFetchRaw = async (\n\tstate: RegistryProviderState,\n\tresourcePath: string,\n\t{ verbose }: { verbose?: (msg: string) => void } = {}\n) => {\n\treturn await fetchRaw(state, resourcePath, {\n\t\tverbose,\n\t\t// @ts-expect-error but it does work\n\t\tfetch: nodeFetch,\n\t\ttoken: getProviderToken(state.provider),\n\t});\n};\n\n/** Wraps the basic implementation to inject `node-fetch` and the correct token. */\nexport const internalFetchManifest = async (\n\tstate: RegistryProviderState,\n\t{ verbose }: { verbose?: (msg: string) => void } = {}\n) => {\n\treturn await fetchManifest(state, {\n\t\tverbose,\n\t\t// @ts-expect-error but it does work\n\t\tfetch: nodeFetch,\n\t\ttoken: getProviderToken(state.provider),\n\t});\n};\n\n/** Gets the locally stored token for the given provider */\nexport const getProviderToken = (provider: RegistryProvider): string | undefined => {\n\t// there isn't an auth implementation for http\n\tif (provider.name === 'http') return;\n\n\tconst token = persisted.get().get(`${provider.name}-token`);\n\n\tif (!token) return;\n\n\treturn token as string;\n};\n\n/** Parses the provided url and returns the state.\n *\n * @param repo\n * @returns\n */\nexport const getProviderState = async (\n\trepo: string\n): Promise<Result<RegistryProviderState, string>> => {\n\tconst provider = selectProvider(repo);\n\tif (provider) {\n\t\tconst state = await provider.state(repo, {\n\t\t\ttoken: getProviderToken(provider),\n\t\t\t// @ts-expect-error but it does work\n\t\t\tfetch: nodeFetch,\n\t\t});\n\n\t\treturn Ok(state);\n\t}\n\n\treturn Err(\n\t\t`Only ${providers.map((p, i) => `${i === providers.length - 1 ? 'and ' : ''}${color.bold(p.name)}`).join(', ')} registries are supported at this time!`\n\t);\n};\n\n/** Gets the provider state for each provided repo url\n *\n * @param repos\n * @returns\n */\nexport const forEachPathGetProviderState = async (\n\t...repos: string[]\n): Promise<Result<RegistryProviderState[], { message: string; repo: string }>> => {\n\tconst resolvedPaths: RegistryProviderState[] = [];\n\n\tconst errors = await Promise.all(\n\t\trepos.map(async (repo) => {\n\t\t\tconst getProviderResult = await getProviderState(repo);\n\n\t\t\tif (getProviderResult.isErr())\n\t\t\t\treturn Err({ message: getProviderResult.unwrapErr(), repo });\n\n\t\t\tconst providerState = getProviderResult.unwrap();\n\n\t\t\tresolvedPaths.push(providerState);\n\t\t})\n\t);\n\n\tconst err = errors.find((err) => err !== undefined);\n\n\tif (err) return err;\n\n\treturn Ok(resolvedPaths);\n};\n\n/** Fetches blocks for each registry and stores them in a map by their repo as well as category and block name.\n *\n * Example Key:\n * `github/ieedan/std/utils/math`\n *\n * @param repos\n * @returns\n */\nexport const fetchBlocks = async (\n\t...repos: RegistryProviderState[]\n): Promise<Result<Map<string, RemoteBlock>, { message: string; repo: string }>> => {\n\tconst blocksMap = new Map<string, RemoteBlock>();\n\n\tconst errors = await Promise.all(\n\t\trepos.map(async (state) => {\n\t\t\tconst getManifestResult = await internalFetchManifest(state);\n\n\t\t\tif (getManifestResult.isErr()) {\n\t\t\t\treturn Err({ message: getManifestResult.unwrapErr(), repo: state.url });\n\t\t\t}\n\n\t\t\tconst manifest = getManifestResult.unwrap();\n\n\t\t\tfor (const category of manifest.categories) {\n\t\t\t\tfor (const block of category.blocks) {\n\t\t\t\t\tblocksMap.set(u.join(state.url, `${block.category}/${block.name}`), {\n\t\t\t\t\t\t...block,\n\t\t\t\t\t\tsourceRepo: state,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t);\n\n\tconst err = errors.find((err) => err !== undefined);\n\n\tif (err) return err;\n\n\treturn Ok(blocksMap);\n};\n\nexport * from './types';\n\nexport {\n\tazure,\n\tbitbucket,\n\tgithub,\n\tgitlab,\n\thttp,\n\tproviders,\n\tinternalFetchManifest as fetchManifest,\n\tinternalFetchRaw as fetchRaw,\n\tselectProvider,\n};\n","import Conf from 'conf';\n\nconst get = () => new Conf({ projectName: 'jsrepo' });\n\nexport { get };\n","import fs from 'node:fs';\nimport color from 'chalk';\nimport { program } from 'commander';\nimport path from 'pathe';\nimport type { Block } from '../types';\nimport { Err, Ok, type Result } from './blocks/types/result';\nimport { mapToArray } from './blocks/utils/map-to-array';\nimport * as url from './blocks/utils/url';\nimport { type ProjectConfig, getPathForBlock, resolvePaths } from './config';\nimport * as registry from './registry-providers/internal';\n\nexport type InstallingBlock = {\n\tname: string;\n\tsubDependency: boolean;\n\tblock: registry.RemoteBlock;\n};\n\nconst resolveTree = async (\n\tblockSpecifiers: string[],\n\tblocksMap: Map<string, registry.RemoteBlock>,\n\trepoPaths: registry.RegistryProviderState[],\n\tinstalled: Map<string, InstallingBlock> = new Map()\n): Promise<Result<InstallingBlock[], string>> => {\n\tconst blocks = new Map<string, InstallingBlock>();\n\n\tfor (const blockSpecifier of blockSpecifiers) {\n\t\tlet block: registry.RemoteBlock | undefined = undefined;\n\n\t\tconst provider = registry.selectProvider(blockSpecifier);\n\n\t\t// if the block starts with github (or another provider) we know it has been resolved\n\t\tif (!provider) {\n\t\t\tif (repoPaths.length === 0) {\n\t\t\t\treturn Err(\n\t\t\t\t\tcolor.red(\n\t\t\t\t\t\t`If your config doesn't contain repos then you must provide the repo in the block specifier ex: \\`${color.bold(\n\t\t\t\t\t\t\t`github/ieedan/std/${blockSpecifier}`\n\t\t\t\t\t\t)}\\`!`\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// check every repo for the block and return the first block found\n\t\t\tfor (const providerState of repoPaths) {\n\t\t\t\tconst { url: repoIdent, specifier } = providerState.provider.parse(\n\t\t\t\t\turl.join(providerState.url, blockSpecifier),\n\t\t\t\t\t{ fullyQualified: true }\n\t\t\t\t);\n\n\t\t\t\tconst tempBlock = blocksMap.get(url.join(repoIdent, specifier!));\n\n\t\t\t\tif (tempBlock === undefined) continue;\n\n\t\t\t\tblock = tempBlock;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t// get shortened name\n\t\t\tconst { url: repoIdent, specifier } = provider.parse(blockSpecifier, {\n\t\t\t\tfullyQualified: true,\n\t\t\t});\n\n\t\t\t// just beautifies name a bit\n\t\t\tblock = blocksMap.get(url.join(repoIdent, specifier!));\n\t\t}\n\n\t\tif (!block) {\n\t\t\treturn Err(`Invalid block! ${color.bold(blockSpecifier)} does not exist!`);\n\t\t}\n\n\t\tconst specifier = `${block.category}/${block.name}`;\n\n\t\tblocks.set(specifier, { name: block.name, subDependency: false, block });\n\n\t\tif (block.localDependencies && block.localDependencies.length > 0) {\n\t\t\tconst subDeps = await resolveTree(\n\t\t\t\tblock.localDependencies.filter((dep) => !blocks.has(dep) && !installed.has(dep)),\n\t\t\t\tblocksMap,\n\t\t\t\trepoPaths,\n\t\t\t\tblocks\n\t\t\t);\n\n\t\t\tif (subDeps.isErr()) return Err(subDeps.unwrapErr());\n\n\t\t\tfor (const dep of subDeps.unwrap()) {\n\t\t\t\tblocks.set(`${dep.block.category}/${dep.block.name}`, dep);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn Ok(mapToArray(blocks, (_, val) => val));\n};\n\ntype InstalledBlock = {\n\tspecifier: `${string}/${string}`;\n\tpath: string;\n\tblock: Block;\n};\n\n/** Finds installed blocks and returns them as `<category>/<name>`\n *\n * @param blocks\n * @param config\n * @returns\n */\nconst getInstalled = (\n\tblocks: Map<string, Block>,\n\tconfig: ProjectConfig,\n\tcwd: string\n): InstalledBlock[] => {\n\tconst installedBlocks: InstalledBlock[] = [];\n\n\tconst resolvedPathsResult = resolvePaths(config.paths, cwd);\n\n\tif (resolvedPathsResult.isErr()) {\n\t\tprogram.error(color.red(resolvedPathsResult.unwrapErr()));\n\t}\n\n\tconst resolvedPaths = resolvedPathsResult.unwrap();\n\n\tfor (const [_, block] of blocks) {\n\t\tconst baseDir = getPathForBlock(block, resolvedPaths, cwd);\n\n\t\tlet blockPath = path.join(baseDir, block.files[0]);\n\t\tif (block.subdirectory) {\n\t\t\tblockPath = path.join(baseDir, block.name);\n\t\t}\n\n\t\tif (fs.existsSync(blockPath))\n\t\t\tinstalledBlocks.push({\n\t\t\t\tspecifier: `${block.category}/${block.name}`,\n\t\t\t\tpath: blockPath,\n\t\t\t\tblock,\n\t\t\t});\n\t}\n\n\treturn installedBlocks;\n};\n\nexport { resolveTree, getInstalled };\n","/*\n\tjsrepo 1.22.1\n\tInstalled from github/ieedan/std\n\t1-4-2025\n*/\n\nimport ansiRegex from 'ansi-regex';\n\n/** Strips a string with ansi escape codes back to it's original form. Useful for when you need to get the actual length of a string.\n *\n * @param str\n * @returns\n *\n * ## Usage\n * ```ts\n * import color from \"chalk\";\n *\n * const redString = color.red(redString);\n *\n * stripAnsi(redString);\n * ```\n */\nconst stripAsni = (str: string) => str.replace(ansiRegex(), '');\n\nexport { stripAsni };\n","/*\n\tjsrepo 1.22.1\n\tInstalled from github/ieedan/std\n\t1-4-2025\n*/\n\nimport { stripAsni } from './strip-ansi';\n\n/** Adds the `padWith` (default `' '`) to the string the amount of times specified by the `space` argument\n *\n * @param str String to add padding to\n * @param space Whitespace to add\n * @param padWith Character to use to pad the string\n * @returns\n *\n * ## Usage\n * ```ts\n * const padded = leftPad(\"Hello\", 3, \".\");\n *\n * console.log(padded); // '...Hello'\n * ```\n */\nconst leftPad = (str: string, space: number, padWith = ' ') => {\n\treturn padWith.repeat(space) + str;\n};\n\n/** Adds the `padWith` until the string length matches the `length`\n *\n * @param str\n * @param length\n * @param padWith\n *\n * ## Usage\n * ```ts\n * const padded = leftPadMin(\"1\", 3, \".\");\n *\n * console.log(padded); // '..1'\n * ```\n */\nconst leftPadMin = (str: string, length: number, padWith = ' ') => {\n\tif (stripAsni(str).length > length)\n\t\tthrow new Error('String length is greater than the length provided.');\n\n\treturn padWith.repeat(length - stripAsni(str).length) + str;\n};\n\n/** Adds the `padWith` (default `' '`) to the string the amount of times specified by the `space` argument\n *\n * @param str String to add padding to\n * @param space Whitespace to add\n * @param padWith Character to use to pad the string\n * @returns\n *\n * ## Usage\n * ```ts\n * const padded = rightPad(\"Hello\", 3, \".\");\n *\n * console.log(padded); // 'Hello...'\n * ```\n */\nconst rightPad = (str: string, space: number, padWith = ' ') => {\n\treturn str + padWith.repeat(space);\n};\n\n/** Adds the `padWith` until the string length matches the `length`\n *\n * @param str\n * @param length\n * @param padWith\n *\n * ## Usage\n * ```ts\n * const padded = rightPadMin(\"1\", 3, \".\");\n *\n * console.log(padded); // '1..'\n * ```\n */\nconst rightPadMin = (str: string, length: number, padWith = ' ') => {\n\tif (stripAsni(str).length > length)\n\t\tthrow new Error('String length is greater than the length provided.');\n\n\treturn str + padWith.repeat(length - stripAsni(str).length);\n};\n\n/** Pads the string with the `padWith` so that it appears in the center of a new string with the provided length.\n *\n * @param str\n * @param length\n * @param padWith\n * @returns\n *\n * ## Usage\n * ```ts\n * const str = \"Hello, World!\";\n *\n * const padded = centerPad(str, str.length + 4);\n *\n * console.log(padded); // '  Hello, World!  '\n * ```\n */\nconst centerPad = (str: string, length: number, padWith = ' ') => {\n\tif (stripAsni(str).length > length) {\n\t\tthrow new Error('String length is greater than the length provided.');\n\t}\n\n\tconst overflow = length - stripAsni(str).length;\n\n\tconst paddingLeft = Math.floor(overflow / 2);\n\n\tconst paddingRight = Math.ceil(overflow / 2);\n\n\treturn padWith.repeat(paddingLeft) + str + padWith.repeat(paddingRight);\n};\n\nexport { leftPad, leftPadMin, rightPad, rightPadMin, centerPad };\n","/*\n\tjsrepo 1.2.4\n\tInstalled from github/ieedan/std\n\t11-21-2024\n*/\n\nimport os from 'node:os';\nimport { leftPadMin } from './pad';\n\n/** Regex used to split on new lines\n *\n * ```\n * /\\n|\\r\\n/g\n * ```\n */\nexport const NEW_LINE_REGEX = /\\n|\\r\\n/g;\n\n/** Splits str into an array of lines.\n *\n * @param str\n * @returns\n *\n * ## Usage\n *\n * ```ts\n * lines.split(\"hello\\\\nhello\\nhello\"); // [\"hello\\\\nhello\", \"hello\"]\n * ```\n */\nconst get = (str: string): string[] => str.split(NEW_LINE_REGEX);\n\nexport type Options = {\n\tlineNumbers: boolean;\n\tprefix: (line: number, lineCount: number) => string;\n};\n\n/** Joins the array of lines back into a string using the platform specific EOL.\n *\n * @param lines\n * @returns\n *\n * ## Usage\n *\n * ```ts\n * lines.join([\"1\", \"2\", \"3\"]); // \"1\\n2\\n3\" or on windows \"1\\r\\n2\\r\\n3\"\n *\n * // add line numbers\n * lines.join([\"import { } from '.'\", \"console.log('test')\"], { lineNumbers: true });\n * // 1 import {  } from '.'\n * // 2 console.log('test')\n *\n * // add a custom prefix\n * lines.join([\"import { } from '.'\", \"console.log('test')\"], { prefix: () => \" + \" });\n * // + import {  } from '.'\n * // + console.log('test')\n * ```\n */\nconst join = (lines: string[], { lineNumbers = false, prefix }: Partial<Options> = {}): string => {\n\tlet transformed = lines;\n\n\tif (lineNumbers) {\n\t\tconst length = lines.length.toString().length + 1;\n\n\t\ttransformed = transformed.map((line, i) => `${leftPadMin(`${i + 1}`, length)} ${line}`);\n\t}\n\n\tif (prefix !== undefined) {\n\t\ttransformed = transformed.map((line, i) => `${prefix(i, lines.length)}${line}`);\n\t}\n\n\treturn transformed.join(os.EOL);\n};\n\nexport { get, join };\n","import fs from 'node:fs';\nimport path from 'pathe';\nimport semver from 'semver';\nimport { Err, Ok, type Result } from './blocks/types/result';\nimport { parsePackageName } from './parse-package-name';\n\nconst findNearestPackageJson = (startDir: string, until: string): string | undefined => {\n\tconst packagePath = path.join(startDir, 'package.json');\n\n\tif (fs.existsSync(packagePath)) return packagePath;\n\n\tif (startDir === until) return undefined;\n\n\tconst segments = startDir.split(/[\\/\\\\]/);\n\n\treturn findNearestPackageJson(segments.slice(0, segments.length - 1).join('/'), until);\n};\n\ntype PackageJson = {\n\tname: string;\n\tversion: string;\n\tdescription: string;\n\tscripts: Record<string, string>;\n\tdependencies: Record<string, string>;\n\tdevDependencies: Record<string, string>;\n};\n\nconst getPackage = (path: string): Result<Partial<PackageJson>, string> => {\n\tif (!fs.existsSync(path)) return Err(`${path} doesn't exist`);\n\n\tconst contents = fs.readFileSync(path).toString();\n\n\treturn Ok(JSON.parse(contents));\n};\n\nconst cleanVersion = (version: string) => {\n\tif (version[0] === '^') {\n\t\treturn version.slice(1);\n\t}\n\n\treturn version;\n};\n\n/** Returns only the dependencies that should be installed based on what is already in the package.json */\nconst returnShouldInstall = (\n\tdependencies: Set<string>,\n\tdevDependencies: Set<string>,\n\t{ cwd }: { cwd: string }\n): { devDependencies: Set<string>; dependencies: Set<string> } => {\n\t// don't mutate originals\n\tconst tempDeps = dependencies;\n\tconst tempDevDeps = devDependencies;\n\n\tconst packageResult = getPackage(path.join(cwd, 'package.json'));\n\n\tif (!packageResult.isErr()) {\n\t\tconst pkg = packageResult.unwrap();\n\n\t\tif (pkg.dependencies) {\n\t\t\tfor (const dep of tempDeps) {\n\t\t\t\t// this was already parsed when building\n\t\t\t\tconst { name, version } = parsePackageName(dep).unwrap();\n\n\t\t\t\tconst foundDep = pkg.dependencies[name];\n\n\t\t\t\t// if version isn't pinned and dep exists delete\n\t\t\t\tif (version === undefined && foundDep) {\n\t\t\t\t\ttempDeps.delete(dep);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// if the version installed satisfies the requested version remove the dep\n\t\t\t\tif (foundDep && semver.satisfies(cleanVersion(foundDep), version)) {\n\t\t\t\t\ttempDeps.delete(dep);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (pkg.devDependencies) {\n\t\t\tfor (const dep of tempDevDeps) {\n\t\t\t\t// this was already parsed when building\n\t\t\t\tconst { name, version } = parsePackageName(dep).unwrap();\n\n\t\t\t\tconst foundDep = pkg.devDependencies[name];\n\n\t\t\t\t// if version isn't pinned and dep exists delete\n\t\t\t\tif (version === undefined && foundDep) {\n\t\t\t\t\ttempDevDeps.delete(dep);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// if the version installed satisfies the requested version remove the dep\n\t\t\t\tif (foundDep && semver.satisfies(cleanVersion(foundDep), version)) {\n\t\t\t\t\ttempDevDeps.delete(dep);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { dependencies: tempDeps, devDependencies: tempDevDeps };\n};\n\nexport { findNearestPackageJson, getPackage, returnShouldInstall };\n","import fs from 'node:fs';\nimport { builtinModules } from 'node:module';\nimport { Biome, Distribution } from '@biomejs/js-api';\nimport type { PartialConfiguration } from '@biomejs/wasm-nodejs';\nimport color from 'chalk';\nimport { type Node, walk } from 'estree-walker';\nimport { type TsConfigResult, createPathsMatcher, getTsconfig } from 'get-tsconfig';\nimport * as parse5 from 'parse5';\nimport path from 'pathe';\nimport * as prettier from 'prettier';\nimport * as sv from 'svelte/compiler';\nimport { Project } from 'ts-morph';\nimport validatePackageName from 'validate-npm-package-name';\nimport * as v from 'vue/compiler-sfc';\nimport * as ascii from './ascii';\nimport { Err, Ok, type Result } from './blocks/types/result';\nimport * as lines from './blocks/utils/lines';\nimport type { Formatter } from './config';\nimport { findNearestPackageJson } from './package';\nimport { parsePackageName } from './parse-package-name';\n\nexport type ResolvedDependencies = {\n\tlocal: string[];\n\tdevDependencies: string[];\n\tdependencies: string[];\n\t/** Maps a literal import to a template import to be replaced during add/update */\n\timports: Record<string, string>;\n};\n\nexport type ResolveDependencyOptions = {\n\tfilePath: string;\n\t/** Only valid for folder based blocks. Helps identify a self dependency */\n\tcontainingDir?: string;\n\tisSubDir: boolean;\n\texcludeDeps: string[];\n\tcwd: string;\n\tdirs: string[];\n};\n\nexport type FormatOptions = {\n\tformatter?: Formatter;\n\t/** Can be used to infer the prettier parser */\n\tfilePath: string;\n\tprettierOptions: prettier.Options | null;\n\tbiomeOptions: PartialConfiguration | null;\n};\n\nexport type Lang = {\n\t/** Matches the supported file types */\n\tmatches: (fileName: string) => boolean;\n\t/** Reads the file and gets any dependencies from its imports */\n\tresolveDependencies: (opts: ResolveDependencyOptions) => Result<ResolvedDependencies, string>;\n\t/** Returns a multiline comment containing the content */\n\tcomment: (content: string) => string;\n\tformat: (code: string, opts: FormatOptions) => Promise<string>;\n};\n\n/** Language support for `*.css` files. */\nconst css: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.css'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\tcomment: (content) => `/*\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n*/`,\n\tformat: async (code, { formatter, prettierOptions, biomeOptions, filePath }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { filepath: filePath, ...prettierOptions });\n\t\t}\n\n\t\tconst biome = await Biome.create({\n\t\t\tdistribution: Distribution.NODE,\n\t\t});\n\n\t\tif (biomeOptions) {\n\t\t\tbiome.applyConfiguration(biomeOptions);\n\t\t}\n\n\t\treturn biome.formatContent(code, { filePath }).content;\n\t},\n};\n\n/** Language support for `*.html` files. */\nconst html: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.html'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst sourceCode = fs.readFileSync(filePath).toString();\n\n\t\tconst ast = parse5.parse(sourceCode);\n\n\t\tconst imports: string[] = [];\n\n\t\t// @ts-ignore yeah I know\n\t\tconst walk = (node, enter: (node) => void) => {\n\t\t\tif (!node) return;\n\n\t\t\tenter(node);\n\n\t\t\tif (node.childNodes && node.childNodes.length > 0) {\n\t\t\t\tfor (const n of node.childNodes) {\n\t\t\t\t\twalk(n, enter);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (const node of ast.childNodes) {\n\t\t\twalk(node, (n) => {\n\t\t\t\tif (n.tagName === 'script') {\n\t\t\t\t\tfor (const attr of n.attrs) {\n\t\t\t\t\t\tif (attr.name === 'src') {\n\t\t\t\t\t\t\timports.push(attr.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tn.tagName === 'link' &&\n\t\t\t\t\t// @ts-ignore yeah I know\n\t\t\t\t\tn.attrs.find((attr) => attr.name === 'rel' && attr.value === 'stylesheet')\n\t\t\t\t) {\n\t\t\t\t\tfor (const attr of n.attrs) {\n\t\t\t\t\t\tif (attr.name === 'href' && !attr.value.startsWith('http')) {\n\t\t\t\t\t\t\timports.push(attr.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: imports,\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: ['svelte', '@sveltejs/kit', ...excludeDeps],\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `<!--\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n-->`,\n\tformat: async (code, { formatter, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { parser: 'html', ...prettierOptions });\n\t\t}\n\n\t\t// biome is in progress for formatting html\n\n\t\treturn code;\n\t},\n};\n\n/** Language support for `*.(json)` files. */\nconst json: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.json'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\t// json doesn't support comments\n\tcomment: (content: string) => content,\n\tformat: async (code, { formatter, prettierOptions, biomeOptions, filePath }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { filepath: filePath, ...prettierOptions });\n\t\t}\n\n\t\tconst biome = await Biome.create({\n\t\t\tdistribution: Distribution.NODE,\n\t\t});\n\n\t\tif (biomeOptions) {\n\t\t\tbiome.applyConfiguration(biomeOptions);\n\t\t}\n\n\t\treturn biome.formatContent(code, { filePath }).content;\n\t},\n};\n\n/** Language support for `*.(jsonc)` files. */\nconst jsonc: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.jsonc'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\tcomment: (content) => `/*\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n*/`,\n\tformat: async (code, { formatter, prettierOptions, biomeOptions, filePath }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { filepath: filePath, ...prettierOptions });\n\t\t}\n\n\t\tconst biome = await Biome.create({\n\t\t\tdistribution: Distribution.NODE,\n\t\t});\n\n\t\tif (biomeOptions) {\n\t\t\tbiome.applyConfiguration({\n\t\t\t\t...biomeOptions,\n\t\t\t\tjson: { parser: { allowComments: true } },\n\t\t\t});\n\t\t}\n\n\t\treturn biome.formatContent(code, { filePath }).content;\n\t},\n};\n\n/** Language support for `*.(sass|scss)` files. */\nconst sass: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.sass') || fileName.endsWith('.scss'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\tcomment: (content) => `/*\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n*/`,\n\tformat: async (code, { formatter, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { parser: 'scss', ...prettierOptions });\n\t\t}\n\n\t\treturn code;\n\t},\n};\n\n/** Language support for `*.svelte` files. */\nconst svelte: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.svelte'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst sourceCode = fs.readFileSync(filePath).toString();\n\n\t\tconst root = sv.parse(sourceCode, { modern: true, filename: filePath });\n\n\t\t// if no script tag then no dependencies\n\t\tif (!root.instance && !root.module)\n\t\t\treturn Ok({ dependencies: [], devDependencies: [], local: [], imports: {} });\n\n\t\tconst modules: string[] = [];\n\n\t\tconst enter = (node: Node) => {\n\t\t\tif (\n\t\t\t\tnode.type === 'ImportDeclaration' ||\n\t\t\t\tnode.type === 'ExportAllDeclaration' ||\n\t\t\t\tnode.type === 'ExportNamedDeclaration'\n\t\t\t) {\n\t\t\t\tif (typeof node.source?.value === 'string') {\n\t\t\t\t\tmodules.push(node.source.value);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tif (root.instance) {\n\t\t\t// biome-ignore lint/suspicious/noExplicitAny: The root instance is just missing the `id` prop\n\t\t\twalk(root.instance as any, { enter });\n\t\t}\n\n\t\tif (root.module) {\n\t\t\t// biome-ignore lint/suspicious/noExplicitAny: The root instance is just missing the `id` prop\n\t\t\twalk(root.module as any, { enter });\n\t\t}\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: modules,\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: ['svelte', '@sveltejs/kit', ...excludeDeps],\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `<!--\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n-->`,\n\tformat: async (code, { formatter, filePath, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\t// only attempt to format if svelte plugin is included in the config.\n\t\tif (\n\t\t\tformatter === 'prettier' &&\n\t\t\tprettierOptions &&\n\t\t\tprettierOptions.plugins?.find((plugin) => plugin === 'prettier-plugin-svelte')\n\t\t) {\n\t\t\treturn await prettier.format(code, { filepath: filePath, ...prettierOptions });\n\t\t}\n\n\t\treturn code;\n\t},\n};\n\n/** Language support for `*.svg` files. */\nconst svg: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.svg'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\tcomment: (content) => `<!--\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n-->`,\n\tformat: async (code) => code,\n};\n\n/** Language support for `*.(js|ts|jsx|tsx)` files. */\nconst typescript: Lang = {\n\tmatches: (fileName) =>\n\t\tfileName.endsWith('.ts') ||\n\t\tfileName.endsWith('.js') ||\n\t\tfileName.endsWith('.tsx') ||\n\t\tfileName.endsWith('.jsx'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst project = new Project();\n\n\t\tconst blockFile = project.addSourceFileAtPath(filePath);\n\n\t\t// get import specifiers\n\t\tconst modules = blockFile\n\t\t\t.getImportDeclarations()\n\t\t\t.map((imp) => imp.getModuleSpecifierValue());\n\n\t\t// get `export x from` specifiers\n\t\tconst exps = blockFile\n\t\t\t.getExportDeclarations()\n\t\t\t.map((imp) => imp.getModuleSpecifierValue())\n\t\t\t.filter((imp) => imp !== undefined);\n\n\t\tmodules.push(...exps);\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: modules,\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: excludeDeps,\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `/*\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n*/`,\n\tformat: async (code, { formatter, filePath, prettierOptions, biomeOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { filepath: filePath, ...prettierOptions });\n\t\t}\n\n\t\tconst biome = await Biome.create({\n\t\t\tdistribution: Distribution.NODE,\n\t\t});\n\n\t\tif (biomeOptions) {\n\t\t\tbiome.applyConfiguration(biomeOptions);\n\t\t}\n\n\t\treturn biome.formatContent(code, { filePath }).content;\n\t},\n};\n\n/** Language support for `*.vue` files. */\nconst vue: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.vue'),\n\tresolveDependencies: ({ filePath, isSubDir, excludeDeps, dirs, cwd, containingDir }) => {\n\t\tconst sourceCode = fs.readFileSync(filePath).toString();\n\n\t\tconst parsed = v.parse(sourceCode, { filename: filePath });\n\n\t\tif (!parsed.descriptor.script?.content && !parsed.descriptor.scriptSetup?.content)\n\t\t\treturn Ok({ dependencies: [], devDependencies: [], local: [], imports: {} });\n\n\t\tlet compiled: v.SFCScriptBlock;\n\t\ttry {\n\t\t\tcompiled = v.compileScript(parsed.descriptor, {\n\t\t\t\tid: 'shut-it',\n\t\t\t}); // you need this id to remove a warning\n\t\t} catch (err) {\n\t\t\treturn Err(`Compile error: ${err}`);\n\t\t}\n\n\t\tif (!compiled.imports)\n\t\t\treturn Ok({ dependencies: [], devDependencies: [], local: [], imports: {} });\n\n\t\tconst imports = Object.values(compiled.imports).map((imp) => imp.source);\n\n\t\tconst resolveResult = resolveImports({\n\t\t\tmoduleSpecifiers: imports,\n\t\t\tfilePath,\n\t\t\tisSubDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t\tcontainingDir,\n\t\t\tdoNotInstall: ['vue', 'nuxt', ...excludeDeps],\n\t\t});\n\n\t\tif (resolveResult.isErr()) {\n\t\t\treturn Err(\n\t\t\t\tresolveResult\n\t\t\t\t\t.unwrapErr()\n\t\t\t\t\t.map((err) => formatError(err))\n\t\t\t\t\t.join('\\n')\n\t\t\t);\n\t\t}\n\n\t\treturn Ok(resolveResult.unwrap());\n\t},\n\tcomment: (content) => `<!--\\n${lines.join(lines.get(content), { prefix: () => '\\t' })}\\n-->`,\n\tformat: async (code, { formatter, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { parser: 'vue', ...prettierOptions });\n\t\t}\n\n\t\t// biome has issues with vue support\n\t\treturn code;\n\t},\n};\n\n/** Language support for `*.(yaml|yml)` files. */\nconst yaml: Lang = {\n\tmatches: (fileName) => fileName.endsWith('.yml') || fileName.endsWith('.yaml'),\n\tresolveDependencies: () =>\n\t\tOk({ dependencies: [], local: [], devDependencies: [], imports: {} }),\n\tcomment: (content: string) => lines.join(lines.get(content), { prefix: () => '# ' }),\n\tformat: async (code, { formatter, prettierOptions }) => {\n\t\tif (!formatter) return code;\n\n\t\tif (formatter === 'prettier') {\n\t\t\treturn await prettier.format(code, { parser: 'yaml', ...prettierOptions });\n\t\t}\n\n\t\treturn code;\n\t},\n};\n\nexport type ResolveImportOptions = {\n\tmoduleSpecifiers: string[];\n\tisSubDir: boolean;\n\tfilePath: string;\n\t/** Only valid for folder based blocks. Helps identify a self dependency */\n\tcontainingDir?: string;\n\tdoNotInstall?: string[];\n\tdirs: string[];\n\tcwd: string;\n};\n\nconst formatError = (err: string) => {\n\treturn `${lines.join(lines.get(err), {\n\t\tprefix: (l) => {\n\t\t\tif (l === 0) return `${ascii.VERTICAL_LINE}  ${ascii.ERROR} `;\n\n\t\t\treturn `${ascii.VERTICAL_LINE}  `;\n\t\t},\n\t})}`;\n};\n\nconst resolveImports = ({\n\tmoduleSpecifiers,\n\tisSubDir,\n\tfilePath,\n\tcontainingDir,\n\tdoNotInstall,\n\tdirs,\n\tcwd,\n}: ResolveImportOptions): Result<ResolvedDependencies, string[]> => {\n\tconst errors: string[] = [];\n\n\tconst deps = new Set<string>();\n\tconst localDeps = new Set<string>();\n\tconst imports: Record<string, string> = {};\n\n\tfor (const specifier of moduleSpecifiers) {\n\t\tif (specifier.startsWith('.')) {\n\t\t\tconst localDep = resolveLocalImport(specifier, isSubDir, {\n\t\t\t\tfilePath,\n\t\t\t\tcontainingDir,\n\t\t\t\tdirs,\n\t\t\t\tcwd,\n\t\t\t});\n\n\t\t\tif (localDep.isErr()) {\n\t\t\t\terrors.push(localDep.unwrapErr());\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst dep = localDep.unwrap();\n\n\t\t\tif (dep) {\n\t\t\t\tlocalDeps.add(dep.dependency);\n\t\t\t\timports[specifier] = dep.template;\n\t\t\t}\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst localDep = tryResolveLocalAlias(specifier, isSubDir, {\n\t\t\tfilePath,\n\t\t\tcontainingDir,\n\t\t\tdirs,\n\t\t\tcwd,\n\t\t});\n\n\t\tif (localDep.isErr()) {\n\t\t\terrors.push(localDep.unwrapErr());\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst dep = localDep.unwrap();\n\n\t\tif (dep) {\n\t\t\tlocalDeps.add(dep.dependency);\n\t\t\timports[specifier] = dep.template;\n\t\t} else {\n\t\t\tdeps.add(specifier);\n\t\t}\n\t}\n\n\tif (errors.length > 0) {\n\t\treturn Err(errors);\n\t}\n\n\tconst { devDependencies, dependencies } = resolveRemoteDeps(Array.from(deps), filePath, {\n\t\tdoNotInstall: doNotInstall ? doNotInstall : [],\n\t});\n\n\treturn Ok({\n\t\tdependencies,\n\t\tdevDependencies,\n\t\tlocal: Array.from(localDeps),\n\t\timports,\n\t} satisfies ResolvedDependencies);\n};\n\ntype ResolveLocalImportResult = {\n\t/** The local block that is a dependency */\n\tdependency: string;\n\t/** A template used to resolve the import during add/update */\n\ttemplate: string;\n};\n\nconst resolveLocalImport = (\n\tmod: string,\n\tisSubDir: boolean,\n\t{\n\t\tfilePath,\n\t\tcontainingDir,\n\t\tdropExtension = true,\n\t\talias,\n\t\tdirs,\n\t\tcwd,\n\t}: {\n\t\tfilePath: string;\n\t\tcontainingDir?: string;\n\t\tdirs: string[];\n\t\talias?: string;\n\t\tmodIsFile?: boolean;\n\t\tcwd: string;\n\t\tdropExtension?: boolean;\n\t}\n): Result<ResolveLocalImportResult | undefined, string> => {\n\tif (isSubDir && (mod.startsWith('./') || mod === '.')) return Ok(undefined);\n\n\t// get the path to the current category\n\t// if the block is a subdirectory block then containing dir must exist\n\tconst categoryDir = isSubDir ? path.join(containingDir!, '../') : path.join(filePath, '../');\n\n\t// get the actual path to the module\n\tconst modPath = path.join(path.join(filePath, '../'), mod);\n\n\t// get the full path to the current category containing folder\n\tconst fullDir = path.join(categoryDir, '../');\n\n\t// prevent self reference in subdirectories\n\tif (containingDir && modPath.startsWith(containingDir)) return Ok(undefined);\n\n\tif (modPath.startsWith(fullDir)) {\n\t\treturn Ok(parsePath(modPath.slice(fullDir.length), dropExtension));\n\t}\n\n\tfor (const dir of dirs) {\n\t\tconst containingPath = path.resolve(path.join(cwd, dir));\n\t\tconst absPath = path.resolve(modPath);\n\n\t\tif (absPath.startsWith(containingPath)) {\n\t\t\treturn Ok(parsePath(absPath.slice(containingPath.length + 1), dropExtension));\n\t\t}\n\t}\n\n\treturn Err(\n\t\t`${filePath}:\\n${alias ? alias : mod} references code not contained in ${color.bold(dirs.join(', '))} and cannot be resolved.`\n\t);\n};\n\nconst parsePath = (localPath: string, dropExtension = true): ResolveLocalImportResult => {\n\tlet [category, block, ...rest] = localPath.split('/');\n\n\t// if undefined we assume we are pointing to the index file\n\tif (block === undefined) {\n\t\tblock = 'index';\n\t}\n\n\tlet trimmedBlock = block;\n\n\t// remove file extension\n\tif (dropExtension && trimmedBlock.includes('.')) {\n\t\ttrimmedBlock = trimmedBlock.slice(\n\t\t\t0,\n\t\t\ttrimmedBlock.length - path.parse(trimmedBlock).ext.length\n\t\t);\n\t}\n\n\tconst blockSpecifier = `${category}/${trimmedBlock}`;\n\n\tlet template = `{{${blockSpecifier}}}`;\n\n\tif (rest.length === 0) {\n\t\tif (trimmedBlock.length !== block.length) {\n\t\t\t// add extension to template\n\t\t\ttemplate += path.parse(block).ext;\n\t\t}\n\t} else {\n\t\ttemplate += `/${rest.join('/')}`;\n\t}\n\n\treturn { dependency: blockSpecifier, template };\n};\n\n/** Tries to resolve the modules as an alias using the tsconfig. */\nconst tryResolveLocalAlias = (\n\tmod: string,\n\tisSubDir: boolean,\n\t{\n\t\tfilePath,\n\t\tdirs,\n\t\tcwd,\n\t\tcontainingDir,\n\t}: { filePath: string; containingDir?: string; dirs: string[]; cwd: string }\n): Result<ResolveLocalImportResult | undefined, string> => {\n\tlet config: TsConfigResult | null;\n\n\ttry {\n\t\tconfig = getTsconfig(filePath, 'tsconfig.json');\n\n\t\tif (!config) {\n\t\t\t// if we don't find the config at first check for a jsconfig\n\t\t\tconfig = getTsconfig(filePath, 'jsconfig.json');\n\n\t\t\tif (!config) {\n\t\t\t\treturn Ok(undefined);\n\t\t\t}\n\t\t}\n\t} catch (err) {\n\t\treturn Err(`Error while trying to get ${color.bold('tsconfig.json')}: ${err}`);\n\t}\n\n\tconst matcher = createPathsMatcher(config);\n\n\tif (matcher) {\n\t\t// if the mod is actually remote the returns paths will be empty\n\t\tconst paths = matcher(mod);\n\n\t\tfor (const modPath of paths) {\n\t\t\tconst foundMod = searchForModule(modPath);\n\n\t\t\tif (!foundMod) continue;\n\n\t\t\tconst pathResolved = path.relative(\n\t\t\t\tpath.resolve(path.join(filePath, '../')),\n\t\t\t\tfoundMod.prettyPath\n\t\t\t);\n\n\t\t\t// if it is not equal the extension has already been dropped\n\t\t\t// we omit the '' extension because it there is no extension there is nothing to be dropped\n\t\t\tconst shouldDropExtension = resolutionEquality(foundMod.prettyPath, foundMod.path, [\n\t\t\t\t'.js',\n\t\t\t\t'.ts',\n\t\t\t]);\n\n\t\t\tconst localDep = resolveLocalImport(pathResolved, isSubDir, {\n\t\t\t\tfilePath,\n\t\t\t\tcontainingDir,\n\t\t\t\talias: mod,\n\t\t\t\tdropExtension: shouldDropExtension,\n\t\t\t\tdirs,\n\t\t\t\tcwd,\n\t\t\t\tmodIsFile: foundMod.type === 'file',\n\t\t\t});\n\n\t\t\tif (localDep.isErr()) return Err(localDep.unwrapErr());\n\n\t\t\tif (localDep.unwrap()) return Ok(localDep.unwrap()!);\n\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn Ok(undefined);\n};\n\n/** Node allows no extension or a .js extension or a .ts extension to all resolve to the same place because of this we employ a different method of equality.\n *\n *  Basically we want to treat a path with a .js extension as equal to the same path with a .ts extension and vise versa.\n */\nconst resolutionEquality = (pathA: string, pathB: string, validExtensions = ['.ts', '.js', '']) => {\n\tif (pathA === pathB) return true;\n\n\tconst parsedA = path.parse(pathA);\n\tconst parsedB = path.parse(pathB);\n\n\tconst pathAWithoutExtension = path.join(parsedA.dir, parsedA.name);\n\tconst pathBWithoutExtension = path.join(parsedB.dir, parsedB.name);\n\n\t// if paths without extension aren't equal then return false\n\tif (pathAWithoutExtension !== pathBWithoutExtension) return false;\n\n\t// as long as both paths have a .js or .ts extension we can be sure that they are equal\n\tif (validExtensions.includes(parsedA.ext) && validExtensions.includes(parsedB.ext)) return true;\n\n\treturn false;\n};\n\n/** Searches around for the module\n *\n * @param path\n */\nconst searchForModule = (\n\tmodPath: string\n): { path: string; prettyPath: string; type: 'file' | 'directory' } | undefined => {\n\tif (fs.existsSync(modPath)) {\n\t\treturn {\n\t\t\tpath: modPath,\n\t\t\tprettyPath: modPath,\n\t\t\ttype: fs.statSync(modPath).isDirectory() ? 'directory' : 'file',\n\t\t};\n\t}\n\n\tconst containing = path.join(modPath, '../');\n\n\t// if containing folder doesn't exist this can't exist\n\tif (!fs.existsSync(containing)) return undefined;\n\n\tconst modParsed = path.parse(modPath);\n\n\t// sometimes it will point to .js because it will resolve in prod but not for us\n\tif (modParsed.ext === '.js') {\n\t\tconst newPath = `${modPath.slice(0, modPath.length - 3)}.ts`;\n\n\t\tif (fs.existsSync(newPath)) return { path: newPath, prettyPath: modPath, type: 'file' };\n\t}\n\n\tconst files = fs.readdirSync(containing);\n\n\tfor (const file of files) {\n\t\tconst fileParsed = path.parse(file);\n\n\t\t// this way the extension doesn't matter\n\t\tif (fileParsed.name === modParsed.base) {\n\t\t\tconst filePath = path.join(containing, file);\n\n\t\t\t// we remove the extension since it wasn't included by the user\n\t\t\tconst prettyPath = filePath.slice(0, filePath.length - fileParsed.ext.length);\n\n\t\t\treturn {\n\t\t\t\tpath: filePath,\n\t\t\t\tprettyPath: prettyPath,\n\t\t\t\ttype: fs.statSync(filePath).isDirectory() ? 'directory' : 'file',\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n};\n\n/** Iterates over the dependency and resolves each one using the nearest package.json file.\n * Strips node APIs and pins the version of each dependency based on what is in the package.json.\n *\n * @param deps\n * @param filePath\n * @returns\n */\nconst resolveRemoteDeps = (\n\tdeps: string[],\n\tfilePath: string,\n\t{ doNotInstall }: { doNotInstall: string[] } = {\n\t\tdoNotInstall: [],\n\t}\n) => {\n\tconst exemptDeps = new Set(doNotInstall);\n\n\tconst filteredDeps = deps.filter(\n\t\t(dep) => !builtinModules.includes(dep) && !dep.startsWith('node:')\n\t);\n\n\tconst pkgPath = findNearestPackageJson(path.dirname(filePath), '');\n\n\tconst dependencies = new Set<string>();\n\tconst devDependencies = new Set<string>();\n\n\tif (pkgPath) {\n\t\tconst { devDependencies: packageDevDependencies, dependencies: packageDependencies } =\n\t\t\tJSON.parse(fs.readFileSync(pkgPath, 'utf-8'));\n\n\t\tfor (const dep of filteredDeps) {\n\t\t\tconst parsed = parsePackageName(dep);\n\n\t\t\tif (parsed.isErr()) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped adding import \\`${color.cyan(dep)}\\`. Reason: Couldn't parse package name`\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst depInfo = parsed.unwrap();\n\n\t\t\tif (!validatePackageName(depInfo.name).validForNewPackages) {\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped adding import \\`${color.cyan(dep)}\\`. Reason: Not a valid package name`\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (exemptDeps.has(depInfo.name)) continue;\n\n\t\t\tlet version: string | undefined = undefined;\n\t\t\tif (packageDependencies !== undefined) {\n\t\t\t\tversion = packageDependencies[depInfo.name];\n\t\t\t}\n\n\t\t\tif (version !== undefined) {\n\t\t\t\tdependencies.add(`${depInfo.name}@${version}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (packageDevDependencies !== undefined) {\n\t\t\t\tversion = packageDevDependencies[depInfo.name];\n\t\t\t}\n\n\t\t\tif (version !== undefined) {\n\t\t\t\tdevDependencies.add(`${depInfo.name}@${version}`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// if no version found just add it without a version\n\t\t\tdependencies.add(depInfo.name);\n\t\t}\n\t}\n\n\treturn {\n\t\tdependencies: Array.from(dependencies),\n\t\tdevDependencies: Array.from(devDependencies),\n\t};\n};\n\nconst languages: Lang[] = [css, html, json, jsonc, sass, svelte, svg, typescript, vue, yaml];\n\nexport {\n\tcss,\n\thtml,\n\tjson,\n\tjsonc,\n\tsass,\n\tsvelte,\n\tsvg,\n\ttypescript,\n\tvue,\n\tyaml,\n\tlanguages,\n\tresolutionEquality,\n};\n","import fs from 'node:fs';\nimport color from 'chalk';\nimport { program } from 'commander';\nimport type { Ignore } from 'ignore';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { type Block, type Category, categorySchema } from '../../types';\nimport * as ascii from '../ascii';\nimport type { RegistryConfig } from '../config';\nimport { languages } from '../language-support';\nimport { isDependedOn } from './check';\n\nconst TEST_SUFFIXES = ['.test.ts', '_test.ts', '.test.js', '_test.js'] as const;\n\nconst isTestFile = (file: string): boolean =>\n\tTEST_SUFFIXES.find((suffix) => file.endsWith(suffix)) !== undefined;\n\ntype Options = {\n\tcwd: string;\n\tignore: Ignore;\n\tconfig: RegistryConfig;\n};\n\n/** Using the provided path to the blocks folder builds the blocks into categories and also resolves dependencies\n *\n * @param blocksPath\n * @returns\n */\nconst buildBlocksDirectory = (blocksPath: string, { cwd, ignore, config }: Options): Category[] => {\n\tlet paths: string[];\n\n\ttry {\n\t\tpaths = fs.readdirSync(blocksPath);\n\t} catch {\n\t\tprogram.error(color.red(`Couldn't read the ${color.bold(blocksPath)} directory.`));\n\t}\n\n\tconst categories: Category[] = [];\n\n\tfor (const categoryPath of paths) {\n\t\tconst categoryDir = path.join(blocksPath, categoryPath);\n\n\t\t// we only check folders\n\t\tif (fs.statSync(categoryDir).isFile()) continue;\n\n\t\t// we append a '/' to tell ignore that this is a directory not a file\n\t\tconst dirName = `${path.relative(cwd, categoryDir)}/`;\n\n\t\tif (ignore.ignores(dirName)) continue;\n\n\t\tconst categoryName = path.basename(categoryPath);\n\n\t\tif (!shouldIncludeCategory(categoryName, config)) continue;\n\n\t\tconst listCategory = shouldListCategory(categoryName, config);\n\n\t\tconst category: Category = {\n\t\t\tname: categoryName,\n\t\t\tblocks: [],\n\t\t};\n\n\t\tconst files = fs.readdirSync(categoryDir);\n\n\t\tfor (const file of files) {\n\t\t\tconst blockDir = path.join(categoryDir, file);\n\n\t\t\tif (fs.statSync(blockDir).isFile()) {\n\t\t\t\tif (isTestFile(file)) continue;\n\n\t\t\t\tconst name = transformBlockName(file);\n\n\t\t\t\tconst listBlock = shouldListBlock(name, config);\n\n\t\t\t\tif (!shouldIncludeBlock(name, config)) continue;\n\n\t\t\t\tconst lang = languages.find((resolver) => resolver.matches(file));\n\n\t\t\t\t// warn for unsupported language\n\t\t\t\tif (!lang) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped \\`${color.bold(blockDir)}\\` \\`*${color.bold(\n\t\t\t\t\t\t\tpath.parse(file).ext\n\t\t\t\t\t\t)}\\` files are not currently supported!`\n\t\t\t\t\t);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// tries to find a test file with the same name as the file\n\t\t\t\tconst testsPath = files.find((f) =>\n\t\t\t\t\tTEST_SUFFIXES.find((suffix) => f === `${name}${suffix}`)\n\t\t\t\t);\n\n\t\t\t\tconst { dependencies, devDependencies, local, imports } = lang\n\t\t\t\t\t.resolveDependencies({\n\t\t\t\t\t\tfilePath: blockDir,\n\t\t\t\t\t\tisSubDir: false,\n\t\t\t\t\t\texcludeDeps: config.excludeDeps,\n\t\t\t\t\t\tdirs: config.dirs,\n\t\t\t\t\t\tcwd,\n\t\t\t\t\t})\n\t\t\t\t\t.match(\n\t\t\t\t\t\t(val) => val,\n\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\tprogram.error(color.red(err));\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\tconst block: Block = {\n\t\t\t\t\tname,\n\t\t\t\t\tdirectory: path.relative(cwd, categoryDir),\n\t\t\t\t\tcategory: categoryName,\n\t\t\t\t\ttests: testsPath !== undefined,\n\t\t\t\t\tsubdirectory: false,\n\t\t\t\t\tlist: listCategory ? listBlock : false,\n\t\t\t\t\tfiles: [file],\n\t\t\t\t\tlocalDependencies: local,\n\t\t\t\t\t_imports_: imports,\n\t\t\t\t\tdependencies,\n\t\t\t\t\tdevDependencies,\n\t\t\t\t};\n\n\t\t\t\t// if test file exists add the file\n\t\t\t\tif (testsPath !== undefined) {\n\t\t\t\t\tblock.files.push(testsPath);\n\t\t\t\t}\n\n\t\t\t\tcategory.blocks.push(block);\n\t\t\t} else {\n\t\t\t\tconst blockName = file;\n\n\t\t\t\tconst listBlock = shouldListBlock(blockName, config);\n\n\t\t\t\tif (!shouldIncludeBlock(blockName, config)) continue;\n\n\t\t\t\tconst localDepsSet = new Set<string>();\n\t\t\t\tconst depsSet = new Set<string>();\n\t\t\t\tconst devDepsSet = new Set<string>();\n\t\t\t\tconst imports: Record<string, string> = {};\n\n\t\t\t\tlet hasTests = false;\n\n\t\t\t\tconst blockFiles: string[] = [];\n\n\t\t\t\t// if the user has enabled allow subdirectories we recursively check each directory and resolve any dependencies\n\t\t\t\tconst walkFiles = (base: string, files: string[]) => {\n\t\t\t\t\tfor (const f of files) {\n\t\t\t\t\t\tconst filePath = path.join(base, f);\n\t\t\t\t\t\t// relative to the block root\n\t\t\t\t\t\tconst relativeFilePath = filePath.slice(blockDir.length + 1);\n\n\t\t\t\t\t\tif (isTestFile(f)) {\n\t\t\t\t\t\t\thasTests = true;\n\n\t\t\t\t\t\t\tblockFiles.push(relativeFilePath);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (fs.statSync(filePath).isDirectory()) {\n\t\t\t\t\t\t\tif (!config.allowSubdirectories) {\n\t\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped \\`${color.bold(path.join(blockDir, f))}\\` subdirectories are not allowed! Allow them with ${color.bold('--allow-subdirectories')}!`\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst subFiles = fs.readdirSync(filePath);\n\n\t\t\t\t\t\t\twalkFiles(filePath, subFiles);\n\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst lang = languages.find((resolver) => resolver.matches(f));\n\n\t\t\t\t\t\tif (!lang) {\n\t\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped \\`${filePath}\\` \\`*${color.bold(\n\t\t\t\t\t\t\t\t\tpath.parse(f).ext\n\t\t\t\t\t\t\t\t)}\\` files are not currently supported!`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst {\n\t\t\t\t\t\t\tlocal,\n\t\t\t\t\t\t\tdependencies,\n\t\t\t\t\t\t\tdevDependencies,\n\t\t\t\t\t\t\timports: imps,\n\t\t\t\t\t\t} = lang\n\t\t\t\t\t\t\t.resolveDependencies({\n\t\t\t\t\t\t\t\tisSubDir: true,\n\t\t\t\t\t\t\t\texcludeDeps: config.excludeDeps,\n\t\t\t\t\t\t\t\tdirs: config.dirs,\n\t\t\t\t\t\t\t\tcontainingDir: blockDir,\n\t\t\t\t\t\t\t\tfilePath,\n\t\t\t\t\t\t\t\tcwd,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.match(\n\t\t\t\t\t\t\t\t(val) => val,\n\t\t\t\t\t\t\t\t(err) => {\n\t\t\t\t\t\t\t\t\tprogram.error(color.red(err));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\tfor (const dep of local) {\n\t\t\t\t\t\t\t// don't add self\n\t\t\t\t\t\t\tif (dep === `${categoryName}/${blockName}`) continue;\n\n\t\t\t\t\t\t\tlocalDepsSet.add(dep);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const dep of dependencies) {\n\t\t\t\t\t\t\tdepsSet.add(dep);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const dep of devDependencies) {\n\t\t\t\t\t\t\tdevDepsSet.add(dep);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor (const [k, v] of Object.entries(imps)) {\n\t\t\t\t\t\t\timports[k] = v;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tblockFiles.push(relativeFilePath);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\twalkFiles(blockDir, fs.readdirSync(blockDir));\n\n\t\t\t\tconst block: Block = {\n\t\t\t\t\tname: blockName,\n\t\t\t\t\tdirectory: path.relative(cwd, blockDir),\n\t\t\t\t\tcategory: categoryName,\n\t\t\t\t\ttests: hasTests,\n\t\t\t\t\tsubdirectory: true,\n\t\t\t\t\tlist: listCategory ? listBlock : false,\n\t\t\t\t\tfiles: blockFiles,\n\t\t\t\t\tlocalDependencies: Array.from(localDepsSet.keys()),\n\t\t\t\t\tdependencies: Array.from(depsSet.keys()),\n\t\t\t\t\tdevDependencies: Array.from(devDepsSet.keys()),\n\t\t\t\t\t_imports_: imports,\n\t\t\t\t};\n\n\t\t\t\tcategory.blocks.push(block);\n\t\t\t}\n\t\t}\n\n\t\tcategories.push(category);\n\t}\n\n\treturn categories;\n};\n\nexport const shouldListBlock = (name: string, config: RegistryConfig) => {\n\t// the length check is just a short circuit here\n\tif (config.doNotListBlocks.length > 0 && config.doNotListBlocks.includes(name)) return false;\n\n\t// if the we only list the provided\n\t// we should only list if the name is included in that list\n\tif (config.listBlocks.length > 0) {\n\t\treturn config.listBlocks.includes(name);\n\t}\n\n\treturn true;\n};\n\nexport const shouldIncludeBlock = (name: string, config: RegistryConfig) => {\n\t// the length check is just a short circuit here\n\tif (config.excludeBlocks.length > 0 && config.excludeBlocks.includes(name)) return false;\n\n\t// if the we only include the provided\n\t// we should only include if the name is included in that list\n\tif (config.includeBlocks.length > 0) {\n\t\treturn config.includeBlocks.includes(name);\n\t}\n\n\treturn true;\n};\n\nexport const shouldListCategory = (name: string, config: RegistryConfig) => {\n\t// the length check is just a short circuit here\n\tif (config.doNotListCategories.length > 0 && config.doNotListCategories.includes(name))\n\t\treturn false;\n\n\t// if the we only list the provided\n\t// we should only list if the name is included in that list\n\tif (config.listCategories.length > 0) {\n\t\treturn config.listCategories.includes(name);\n\t}\n\n\treturn true;\n};\n\nexport const shouldIncludeCategory = (name: string, config: RegistryConfig) => {\n\t// the length check is just a short circuit here\n\tif (config.excludeCategories.length > 0 && config.excludeCategories.includes(name))\n\t\treturn false;\n\n\t// if the we only include the provided\n\t// we should only include if the name is included in that list\n\tif (config.includeCategories.length > 0) {\n\t\treturn config.includeCategories.includes(name);\n\t}\n\n\treturn true;\n};\n\n/** Takes the given file and returns the block name */\nconst transformBlockName = (file: string) => {\n\treturn path.parse(path.basename(file)).name;\n};\n\nconst pruneUnused = (categories: Category[]): [Category[], number] => {\n\tconst pruned: Category[] = [];\n\tconst prunedCount = 0;\n\n\tfor (const category of categories) {\n\t\tconst catBlocks: Block[] = [];\n\n\t\tfor (const block of category.blocks) {\n\t\t\tconst specifier = `${block.category}/${block.name}`;\n\n\t\t\tif (!block.list) {\n\t\t\t\tconst dependedOn = isDependedOn(specifier, categories);\n\n\t\t\t\tif (!dependedOn) continue;\n\t\t\t}\n\n\t\t\tcatBlocks.push(block);\n\t\t}\n\n\t\tif (catBlocks.length > 0) pruned.push({ name: category.name, blocks: catBlocks });\n\t}\n\n\treturn [pruned, prunedCount];\n};\n\nconst readCategories = (outputFilePath: string): Category[] =>\n\tv.parse(v.array(categorySchema), JSON.parse(fs.readFileSync(outputFilePath).toString()));\n\nexport { buildBlocksDirectory, readCategories, isTestFile, pruneUnused };\n","import color from 'chalk';\nimport { execa } from 'execa';\nimport { type Agent, resolveCommand } from 'package-manager-detector';\nimport path from 'pathe';\nimport { flags } from './blocks/package-managers/flags';\nimport { Err, Ok, type Result } from './blocks/types/result';\nimport type { ProjectConfig } from './config';\n\nexport type Options = {\n\tpm: Agent;\n\tdeps: string[];\n\t/** Install as devDependency */\n\tdev: boolean;\n\tcwd: string;\n\tignoreWorkspace?: boolean;\n};\n\n/** Installs the provided dependencies using the provided package manager\n *\n * @param param0\n * @returns\n */\nconst installDependencies = async ({\n\tpm,\n\tdeps,\n\tdev,\n\tcwd,\n\tignoreWorkspace = false,\n}: Options): Promise<Result<string[], string>> => {\n\tconst args = [...deps];\n\n\tif (dev) {\n\t\targs.push(flags[pm]['install-as-dev-dependency']);\n\t}\n\n\tconst noWorkspace = flags[pm]['no-workspace'];\n\n\tif (ignoreWorkspace && noWorkspace) {\n\t\targs.push(noWorkspace);\n\t}\n\n\tconst add = resolveCommand(pm, 'add', args);\n\n\tif (add == null) return Err(color.red(`Could not resolve add command for '${pm}'.`));\n\n\ttry {\n\t\tawait execa(add.command, [...add.args], { cwd });\n\n\t\treturn Ok(deps);\n\t} catch {\n\t\treturn Err(\n\t\t\tcolor.red(\n\t\t\t\t`Failed to install ${color.bold(deps.join(', '))}! Failed while running '${color.bold(\n\t\t\t\t\t`${add.command} ${add.args.join(' ')}`\n\t\t\t\t)}'`\n\t\t\t)\n\t\t);\n\t}\n};\n\nconst templatePattern = /\\{\\{([^\\/]+)\\/([^\\}]+)\\}\\}/g;\n\nexport type ResolveOptions = {\n\ttemplate: string;\n\tconfig: ProjectConfig;\n\tdestPath: string;\n\tcwd: string;\n};\n\n/** Takes a template and uses replaces it with an alias or relative path that resolves to the correct block\n *\n * @param param0\n * @returns\n */\nconst resolveLocalDependencyTemplate = ({ template, config, destPath, cwd }: ResolveOptions) => {\n\tconst destDir = path.join(destPath, '../');\n\n\treturn template.replace(templatePattern, (_, category, name) => {\n\t\tif (config.paths[category] === undefined) {\n\t\t\t// if relative make it relative\n\t\t\tif (config.paths['*'].startsWith('.')) {\n\t\t\t\tconst relative = path.relative(\n\t\t\t\t\tdestDir,\n\t\t\t\t\tpath.join(cwd, config.paths['*'], category, name)\n\t\t\t\t);\n\n\t\t\t\treturn relative.startsWith('.') ? relative : `./${relative}`;\n\t\t\t}\n\n\t\t\treturn path.join(config.paths['*'], category, name);\n\t\t}\n\n\t\t// if relative make it relative\n\t\tif (config.paths[category].startsWith('.')) {\n\t\t\tconst relative = path.relative(destDir, path.join(cwd, config.paths[category], name));\n\n\t\t\treturn relative.startsWith('.') ? relative : `./${relative}`;\n\t\t}\n\n\t\treturn path.join(config.paths[category], name);\n\t});\n};\n\nexport { installDependencies, resolveLocalDependencyTemplate };\n","import type { Agent } from 'package-manager-detector';\n\nexport type Flags = {\n\t'no-workspace'?: string;\n\t'install-as-dev-dependency': string;\n};\n\nexport const bun: Flags = {\n\t'no-workspace': '--no-workspace',\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const deno: Flags = {\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const npm: Flags = {\n\t'no-workspace': '--workspaces=false',\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const pnpm: Flags = {\n\t'no-workspace': '--ignore-workspace',\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const yarn: Flags = {\n\t'no-workspace': '--focus',\n\t'install-as-dev-dependency': '-D',\n};\n\nexport const flags: Record<Agent, Flags> = {\n\tbun,\n\tnpm,\n\tpnpm,\n\tdeno,\n\tyarn,\n\t'yarn@berry': yarn,\n\t'pnpm@6': pnpm,\n};\n","import type { PartialConfiguration } from '@biomejs/wasm-nodejs';\nimport color from 'chalk';\nimport escapeStringRegexp from 'escape-string-regexp';\nimport type * as prettier from 'prettier';\nimport { Err, Ok, type Result } from './blocks/types/result';\nimport type { ProjectConfig } from './config';\nimport { resolveLocalDependencyTemplate } from './dependencies';\nimport { languages } from './language-support';\n\ntype TransformRemoteContentOptions = {\n\tfile: {\n\t\t/** The content of the file */\n\t\tcontent: string;\n\t\t/** The dest path of the file used to determine the language */\n\t\tdestPath: string;\n\t};\n\tconfig: ProjectConfig;\n\twatermark: string;\n\timports: Record<string, string>;\n\tprettierOptions: prettier.Options | null;\n\tbiomeOptions: PartialConfiguration | null;\n\tcwd: string;\n\tverbose?: (msg: string) => void;\n};\n\n/** Makes the necessary modifications to the content of the file to ensure it works properly in the users project\n *\n * @param param0\n * @returns\n */\nconst transformRemoteContent = async ({\n\tfile,\n\tconfig,\n\timports,\n\twatermark,\n\tprettierOptions,\n\tbiomeOptions,\n\tcwd,\n\tverbose,\n}: TransformRemoteContentOptions): Promise<Result<string, string>> => {\n\tconst lang = languages.find((lang) => lang.matches(file.destPath));\n\n\tlet content: string = file.content;\n\n\tif (lang) {\n\t\tif (config.watermark) {\n\t\t\tconst comment = lang.comment(watermark);\n\n\t\t\tcontent = `${comment}\\n\\n${content}`;\n\t\t}\n\n\t\tverbose?.(`Formatting ${color.bold(file.destPath)}`);\n\n\t\ttry {\n\t\t\tcontent = await lang.format(content, {\n\t\t\t\tfilePath: file.destPath,\n\t\t\t\tformatter: config.formatter,\n\t\t\t\tprettierOptions,\n\t\t\t\tbiomeOptions,\n\t\t\t});\n\t\t} catch (err) {\n\t\t\treturn Err(`Error formatting ${color.bold(file.destPath)} ${err}`);\n\t\t}\n\t}\n\n\t// transform imports\n\tfor (const [literal, template] of Object.entries(imports)) {\n\t\tconst resolvedImport = resolveLocalDependencyTemplate({\n\t\t\ttemplate,\n\t\t\tconfig,\n\t\t\tdestPath: file.destPath,\n\t\t\tcwd,\n\t\t});\n\n\t\t// this way we only replace the exact import since it will be surrounded in quotes\n\t\tconst literalRegex = new RegExp(`(['\"])${escapeStringRegexp(literal)}\\\\1`, 'g');\n\n\t\tcontent = content.replaceAll(literalRegex, `$1${resolvedImport}$1`);\n\t}\n\n\treturn Ok(content);\n};\n\ntype FormatOptions = {\n\tfile: {\n\t\t/** The content of the file */\n\t\tcontent: string;\n\t\t/** The dest path of the file used to determine the language */\n\t\tdestPath: string;\n\t};\n\tconfig: ProjectConfig;\n\tprettierOptions: prettier.Options | null;\n\tbiomeOptions: PartialConfiguration | null;\n};\n\n/** Auto detects the language and formats the file content.\n *\n * @param param0\n * @returns\n */\nconst formatFile = async ({\n\tfile,\n\tconfig,\n\tprettierOptions,\n\tbiomeOptions,\n}: FormatOptions): Promise<string> => {\n\tconst lang = languages.find((lang) => lang.matches(file.destPath));\n\n\tlet newContent = file.content;\n\n\tif (lang) {\n\t\ttry {\n\t\t\tnewContent = await lang.format(file.content, {\n\t\t\t\tfilePath: file.destPath,\n\t\t\t\tformatter: config.formatter,\n\t\t\t\tprettierOptions,\n\t\t\t\tbiomeOptions,\n\t\t\t});\n\t\t} catch {\n\t\t\treturn newContent;\n\t\t}\n\t}\n\n\treturn newContent;\n};\n\nexport { transformRemoteContent, formatFile };\n","import fs from 'node:fs';\nimport type { PartialConfiguration } from '@biomejs/wasm-nodejs';\nimport path from 'pathe';\nimport * as prettier from 'prettier';\nimport type { Formatter } from './config';\n\ntype FormatterConfig = {\n\tprettierOptions: prettier.Options | null;\n\tbiomeOptions: PartialConfiguration | null;\n};\n\nconst loadFormatterConfig = async ({\n\tformatter,\n\tcwd,\n}: { formatter?: Formatter; cwd: string }): Promise<FormatterConfig> => {\n\tlet prettierOptions: prettier.Options | null = null;\n\tif (formatter === 'prettier') {\n\t\tprettierOptions = await prettier.resolveConfig(path.join(cwd, '.prettierrc'));\n\t}\n\n\tlet biomeOptions: PartialConfiguration | null = null;\n\tif (formatter === 'biome') {\n\t\tconst configPath = path.join(cwd, 'biome.json');\n\t\tif (fs.existsSync(configPath)) {\n\t\t\tbiomeOptions = JSON.parse(fs.readFileSync(configPath).toString());\n\t\t}\n\t}\n\n\treturn {\n\t\tbiomeOptions,\n\t\tprettierOptions,\n\t};\n};\n\nexport { type FormatterConfig, loadFormatterConfig };\n","const getWatermark = (version: string, repoUrl: string): string => {\n\treturn `jsrepo ${version}\\nInstalled from ${repoUrl}\\n${new Date()\n\t\t.toLocaleDateString()\n\t\t.replaceAll('/', '-')}`;\n};\n\nexport { getWatermark };\n","import { intro, spinner } from '@clack/prompts';\nimport boxen, { type Options as BoxenOptions } from 'boxen';\nimport color from 'chalk';\nimport { detectSync, resolveCommand } from 'package-manager-detector';\nimport semver from 'semver';\nimport * as ascii from './ascii';\nimport { stripAsni } from './blocks/utils/strip-ansi';\nimport type { CLIContext } from './context';\n\nexport type Task = {\n\tloadingMessage: string;\n\tcompletedMessage: string;\n\trun: () => Promise<void>;\n};\n\ntype TaskOptions = {\n\tverbose?: (msg: string) => void;\n};\n\nconst runTasks = async (tasks: Task[], { verbose = undefined }: TaskOptions) => {\n\tconst loading = spinner();\n\n\tfor (const task of tasks) {\n\t\tif (verbose) {\n\t\t\tverbose(task.loadingMessage);\n\t\t} else {\n\t\t\tloading.start(task.loadingMessage);\n\t\t}\n\n\t\ttry {\n\t\t\tawait task.run();\n\t\t} catch (err) {\n\t\t\tloading.stop(`Error while ${task.loadingMessage}`);\n\t\t\tconsole.error(err);\n\t\t}\n\n\t\tif (verbose) {\n\t\t\tverbose(task.completedMessage);\n\t\t} else {\n\t\t\tloading.stop(task.completedMessage);\n\t\t}\n\t}\n};\n\nexport type ConcurrentTask = {\n\trun: ({ message }: { message: (str: string) => void }) => Promise<void>;\n};\n\nexport type ConcurrentOptions = {\n\tstartMessage: string;\n\tstopMessage: string;\n\ttasks: ConcurrentTask[];\n\tverbose?: (msg: string) => void;\n};\n\nconst runTasksConcurrently = async ({\n\ttasks,\n\tstartMessage,\n\tstopMessage,\n\tverbose,\n}: ConcurrentOptions) => {\n\tconst loading = spinner();\n\n\tconst message = (msg: string) => {\n\t\tif (verbose) {\n\t\t\tverbose(msg);\n\t\t} else {\n\t\t\tloading.message(msg);\n\t\t}\n\t};\n\n\tif (verbose) {\n\t\tverbose(startMessage);\n\t} else {\n\t\tloading.start(startMessage);\n\t}\n\n\tawait Promise.all([...tasks.map((t) => t.run({ message }))]);\n\n\tif (verbose) {\n\t\tverbose(stopMessage);\n\t} else {\n\t\tloading.stop(stopMessage);\n\t}\n};\n\nexport const boxenDefaultOptions: BoxenOptions = {\n\tpadding: 1,\n\tborderColor: 'gray',\n\tborderStyle: {\n\t\ttopLeft: stripAsni(ascii.JUNCTION_RIGHT),\n\t\tbottomLeft: stripAsni(ascii.JUNCTION_RIGHT),\n\t\ttopRight: stripAsni(ascii.TOP_RIGHT_CORNER),\n\t\ttop: stripAsni(ascii.HORIZONTAL_LINE),\n\t\tbottom: stripAsni(ascii.HORIZONTAL_LINE),\n\t\tbottomRight: stripAsni(ascii.BOTTOM_RIGHT_CORNER),\n\t\tleft: stripAsni(ascii.VERTICAL_LINE),\n\t\tright: stripAsni(ascii.VERTICAL_LINE),\n\t},\n};\n\nconst nextSteps = (steps: string[]): string => {\n\tconst box = boxen(steps.join('\\n'), {\n\t\t...boxenDefaultOptions,\n\t\ttitle: 'Next Steps',\n\t\ttextAlignment: 'left',\n\t});\n\n\treturn `${ascii.VERTICAL_LINE}\\n${box}\\n`;\n};\n\nconst truncatedList = (items: string[], maxLength = 3) => {\n\tconst truncated = items.slice(0, maxLength);\n\n\tconst remaining = items.length - truncated.length;\n\n\treturn `${truncated.join(', ')}${remaining > 0 ? ` and ${remaining} other(s)` : ''}`;\n};\n\nconst newerVersionAvailable = (name: string, oldVersion: string, newVersion: string) => {\n\tconst pm = detectSync({ cwd: process.cwd() })?.agent ?? 'npm';\n\n\tconst installCommand = resolveCommand(pm, 'global', ['jsrepo@latest']);\n\n\tconst text: string[] = [\n\t\t`Update available! ${color.redBright(oldVersion)} -> ${color.greenBright(newVersion)}`,\n\t\t`${color.cyan('Changelog')}: https://github.com/ieedan/jsrepo/releases/tag/${name}@${newVersion}`,\n\t\t`Run ${color.cyan(`${installCommand?.command} ${installCommand?.args.join(' ')}`)} to update!`,\n\t\t'',\n\t\t`${color.yellowBright('Star')} on GitHub for updates: https://github.com/ieedan/jsrepo`,\n\t];\n\n\tconst box = boxen(text.join('\\n'), {\n\t\tborderColor: 'gray',\n\t\tpadding: 1,\n\t\tmargin: 1,\n\t\ttextAlignment: 'center',\n\t});\n\n\treturn box;\n};\n\nconst _intro = ({ package: pkg }: CLIContext) => {\n\tconsole.clear();\n\n\tif (pkg.latestVersion) {\n\t\tif (semver.lt(pkg.version, pkg.latestVersion)) {\n\t\t\tconsole.info(newerVersionAvailable(pkg.name, pkg.version, pkg.latestVersion));\n\t\t}\n\t}\n\n\tintro(`${color.bgHex('#f7df1e').black(` ${pkg.name} `)}${color.gray(` v${pkg.version} `)}`);\n};\n\nexport { runTasks, nextSteps, _intro as intro, runTasksConcurrently, truncatedList };\n","import fs from 'node:fs';\nimport {\n\tcancel,\n\tconfirm,\n\tisCancel,\n\tlog,\n\tmultiselect,\n\toutro,\n\tselect,\n\tspinner,\n\ttext,\n} from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, program } from 'commander';\nimport { resolveCommand } from 'package-manager-detector/commands';\nimport { detect } from 'package-manager-detector/detect';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { context } from '../cli';\nimport * as ascii from '../utils/ascii';\nimport { getInstalled, resolveTree } from '../utils/blocks';\nimport * as url from '../utils/blocks/utils/url';\nimport { isTestFile } from '../utils/build';\nimport {\n\ttype Formatter,\n\ttype ProjectConfig,\n\tgetPathForBlock,\n\tgetProjectConfig,\n\tprojectConfigSchema,\n\tresolvePaths,\n} from '../utils/config';\nimport { installDependencies } from '../utils/dependencies';\nimport { transformRemoteContent } from '../utils/files';\nimport { loadFormatterConfig } from '../utils/format';\nimport { getWatermark } from '../utils/get-watermark';\nimport { returnShouldInstall } from '../utils/package';\nimport * as persisted from '../utils/persisted';\nimport {\n\ttype ConcurrentTask,\n\tintro,\n\tnextSteps,\n\trunTasksConcurrently,\n\ttruncatedList,\n} from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.object({\n\trepo: v.optional(v.string()),\n\tallow: v.boolean(),\n\tyes: v.boolean(),\n\tverbose: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst add = new Command('add')\n\t.description('Add blocks to your project.')\n\t.argument(\n\t\t'[blocks...]',\n\t\t'Names of the blocks you want to add to your project. ex: (utils/math, github/ieedan/std/utils/math)'\n\t)\n\t.option('--repo <repo>', 'Repository to download the blocks from.')\n\t.option('-A, --allow', 'Allow jsrepo to download code from the provided repo.', false)\n\t.option('-y, --yes', 'Skip confirmation prompt.', false)\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (blockNames, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tintro(context);\n\n\t\tawait _add(blockNames, options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _add = async (blockNames: string[], options: Options) => {\n\tconst verbose = (msg: string) => {\n\t\tif (options.verbose) {\n\t\t\tconsole.info(`${ascii.INFO} ${msg}`);\n\t\t}\n\t};\n\n\tverbose(`Attempting to add ${JSON.stringify(blockNames)}`);\n\n\tconst loading = spinner();\n\n\tconst configResult = getProjectConfig(options.cwd);\n\n\t/** The user has opted for no config */\n\tconst noConfig = configResult.isErr();\n\n\tlet config: ProjectConfig;\n\n\tif (configResult.isErr()) {\n\t\tlet shouldContinue = options.yes;\n\n\t\tif (!options.yes) {\n\t\t\tconst response = await confirm({\n\t\t\t\tmessage: `You don't have ${ascii.JSREPO} initialized in your project. Do you want to continue?`,\n\t\t\t\tinitialValue: false,\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tshouldContinue = response;\n\t\t}\n\n\t\tif (!shouldContinue) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\t// add default config used for default values in prompts\n\t\tconfig = {\n\t\t\t$schema: '',\n\t\t\tincludeTests: false,\n\t\t\twatermark: true,\n\t\t\tpaths: {\n\t\t\t\t'*': './src/blocks',\n\t\t\t},\n\t\t\trepos: [],\n\t\t};\n\t} else {\n\t\tconfig = configResult.unwrap();\n\t}\n\n\tlet repoPaths = config.repos;\n\tconst mustResolveRepos = new Set<string>();\n\tlet resolveAllRepos = false;\n\n\t// we just want to override all others if supplied via the CLI\n\tif (options.repo) {\n\t\trepoPaths = [options.repo];\n\t}\n\n\t// resolve repos for blocks\n\tfor (const blockSpecifier of blockNames) {\n\t\tconst provider = registry.selectProvider(blockSpecifier);\n\n\t\t// we are only getting repos for blocks that specified repos\n\t\tif (!provider) {\n\t\t\t// if a block doesn't specify a repo we must resolve all\n\t\t\tresolveAllRepos = true;\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst { url: repo } = provider.parse(blockSpecifier, { fullyQualified: true });\n\n\t\tconst alreadyExists =\n\t\t\t!config.repos.find((repoPath) => repoPath === repo) && !mustResolveRepos.has(repo);\n\n\t\tif (!alreadyExists) {\n\t\t\tif (!options.allow) {\n\t\t\t\tconst result = await confirm({\n\t\t\t\t\tmessage: `Allow ${ascii.JSREPO} to download and run code from ${color.cyan(repo)}?`,\n\t\t\t\t\tinitialValue: true,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(result) || !result) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// only add if it doesn't exist\n\t\t\trepoPaths.push(repo);\n\t\t}\n\n\t\t// this way we add the config.repos as well\n\t\tmustResolveRepos.add(repo);\n\t}\n\n\tif (!resolveAllRepos && blockNames.length > 0) {\n\t\trepoPaths = Array.from(mustResolveRepos);\n\t}\n\n\tif (!options.allow && options.repo) {\n\t\tconst result = await confirm({\n\t\t\tmessage: `Allow ${ascii.JSREPO} to download and run code from ${color.cyan(options.repo)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\tif (repoPaths.length === 0) {\n\t\tif (noConfig) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`Fully quality blocks ex: (github/ieedan/std/utils/math) or provide the \\`${color.bold(\n\t\t\t\t\t\t'--repo'\n\t\t\t\t\t)}\\` flag to specify a registry.`\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`There were no repos present in your config and you didn't provide the \\`${color.bold(\n\t\t\t\t\t'--repo'\n\t\t\t\t)}\\` flag with a repo.`\n\t\t\t)\n\t\t);\n\t}\n\n\tverbose(`Resolving ${color.cyan(repoPaths.join(', '))}`);\n\n\tif (!options.verbose) loading.start(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst resolvedRepos: registry.RegistryProviderState[] = (\n\t\tawait registry.forEachPathGetProviderState(...repoPaths)\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed to get info for ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tverbose(`Resolved ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst blocksMap: Map<string, registry.RemoteBlock> = (\n\t\tawait registry.fetchBlocks(...resolvedRepos)\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed fetching blocks from ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tif (!options.verbose) loading.stop(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tlet installedBlocks = getInstalled(blocksMap, config, options.cwd).map((val) => val.specifier);\n\n\tlet installingBlockNames = blockNames;\n\n\t// if no blocks are provided prompt the user for what blocks they want\n\tif (installingBlockNames.length === 0) {\n\t\tconst promptResult = await multiselect({\n\t\t\tmessage: 'Select which blocks to add.',\n\t\t\toptions: Array.from(blocksMap.entries())\n\t\t\t\t.filter(([_, value]) => value.list)\n\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\tconst shortName = `${value.category}/${value.name}`;\n\n\t\t\t\t\tconst blockExists =\n\t\t\t\t\t\tinstalledBlocks.findIndex((block) => block === shortName) !== -1;\n\n\t\t\t\t\tlet label: string;\n\n\t\t\t\t\t// show the full repo if there are multiple repos\n\t\t\t\t\tif (repoPaths.length > 1) {\n\t\t\t\t\t\tlabel = `${color.cyan(url.join(value.sourceRepo.url, value.category))}/${value.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlabel = `${color.cyan(value.category)}/${value.name}`;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: blockExists ? color.gray(label) : label,\n\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t// show hint for `Installed` if block is already installed\n\t\t\t\t\t\thint: blockExists ? 'Installed' : undefined,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\trequired: true,\n\t\t});\n\n\t\tif (isCancel(promptResult)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tinstallingBlockNames = promptResult as string[];\n\t}\n\n\tverbose(`Installing blocks ${color.cyan(installingBlockNames.join(', '))}`);\n\n\tconst installingBlocks = (\n\t\tawait resolveTree(installingBlockNames, blocksMap, resolvedRepos)\n\t).match(\n\t\t(val) => val,\n\t\t(err) => program.error(err)\n\t);\n\n\tconst pm = (await detect({ cwd: options.cwd }))?.agent ?? 'npm';\n\n\tconst tasks: ConcurrentTask[] = [];\n\n\tlet devDeps: Set<string> = new Set<string>();\n\tlet deps: Set<string> = new Set<string>();\n\n\tconst store = persisted.get();\n\n\tif (noConfig) {\n\t\tconst zeroConfigKey = `${options.cwd}-zero-config`;\n\n\t\tconst zeroConfigParsed = v.safeParse(projectConfigSchema, store.get(zeroConfigKey));\n\n\t\tconst zeroConfig = zeroConfigParsed.success ? zeroConfigParsed.output : config;\n\n\t\tconst categories = Array.from(new Set(installingBlocks.map((b) => b.block.category)));\n\n\t\tfor (const cat of categories) {\n\t\t\tconst blocksPath = await text({\n\t\t\t\tmessage: `Where would you like to add ${color.cyan(cat)}?`,\n\t\t\t\tplaceholder: zeroConfig ? zeroConfig.paths[cat] : `./src/${cat}`,\n\t\t\t\tinitialValue: zeroConfig ? zeroConfig.paths[cat] : `./src/${cat}`,\n\t\t\t\tdefaultValue: zeroConfig ? zeroConfig.paths[cat] : `./src/${cat}`,\n\t\t\t\tvalidate(value) {\n\t\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (isCancel(blocksPath)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tconfig.paths[cat] = blocksPath;\n\t\t}\n\n\t\tif (!options.yes) {\n\t\t\tconst includeTests = await confirm({\n\t\t\t\tmessage: 'Include tests?',\n\t\t\t\tinitialValue: zeroConfig.includeTests,\n\t\t\t});\n\n\t\t\tif (isCancel(includeTests)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tconfig.includeTests = includeTests;\n\n\t\t\tconst addWatermark = await confirm({\n\t\t\t\tmessage: 'Add watermark?',\n\t\t\t\tinitialValue: zeroConfig.watermark,\n\t\t\t});\n\n\t\t\tif (isCancel(addWatermark)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tconfig.watermark = addWatermark;\n\t\t}\n\n\t\tlet defaultFormatter = 'none';\n\n\t\tif (fs.existsSync(path.join(options.cwd, '.prettierrc'))) {\n\t\t\tdefaultFormatter = 'prettier';\n\t\t}\n\n\t\tif (fs.existsSync(path.join(options.cwd, 'biome.json'))) {\n\t\t\tdefaultFormatter = 'biome';\n\t\t}\n\n\t\tconst response = await select({\n\t\t\tmessage: 'What formatter would you like to use?',\n\t\t\toptions: ['Prettier', 'Biome', 'None'].map((val) => ({\n\t\t\t\tvalue: val.toLowerCase(),\n\t\t\t\tlabel: val,\n\t\t\t})),\n\t\t\tinitialValue:\n\t\t\t\tdefaultFormatter === 'none'\n\t\t\t\t\t? zeroConfig.formatter\n\t\t\t\t\t\t? zeroConfig.formatter\n\t\t\t\t\t\t: 'none'\n\t\t\t\t\t: defaultFormatter,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (response !== 'none') {\n\t\t\tconfig.formatter = response as Formatter;\n\t\t}\n\n\t\tstore.set(zeroConfigKey, config);\n\n\t\t// re-run to get installed blocks at the provided path\n\t\tinstalledBlocks = getInstalled(blocksMap, config, options.cwd).map((val) => val.specifier);\n\t}\n\n\tconst { prettierOptions, biomeOptions } = await loadFormatterConfig({\n\t\tformatter: config.formatter,\n\t\tcwd: options.cwd,\n\t});\n\n\tconst resolvedPathsResult = resolvePaths(config.paths, options.cwd);\n\n\tif (resolvedPathsResult.isErr()) {\n\t\tprogram.error(color.red(resolvedPathsResult.unwrapErr()));\n\t}\n\n\tconst resolvedPaths = resolvedPathsResult.unwrap();\n\n\tconst addedBlocks: string[] = [];\n\n\tlet overwriteAll: boolean | undefined;\n\n\tfor (const { block } of installingBlocks) {\n\t\tconst fullSpecifier = url.join(block.sourceRepo.url, block.category, block.name);\n\t\tconst shortSpecifier = `${block.category}/${block.name}`;\n\t\tconst watermark = getWatermark(context.package.version, block.sourceRepo.url);\n\n\t\tconst providerInfo = block.sourceRepo;\n\n\t\tverbose(`Setting up ${fullSpecifier}`);\n\n\t\tconst directory = getPathForBlock(block, resolvedPaths, options.cwd);\n\n\t\tconst blockExists = installedBlocks.find((b) => shortSpecifier === b);\n\n\t\tif (blockExists && !options.yes && !overwriteAll) {\n\t\t\tif (overwriteAll === undefined) {\n\t\t\t\tconst overwriteBlocks = installingBlocks\n\t\t\t\t\t.map((installing) => `${installing.block.category}/${installing.block.name}`)\n\t\t\t\t\t.filter((spec) => installedBlocks.find((b) => b === spec));\n\n\t\t\t\tlog.warn(\n\t\t\t\t\t`The following components ${color.bold.yellow('already exist')}: ${color.cyan(truncatedList(overwriteBlocks))}`\n\t\t\t\t);\n\n\t\t\t\tconst overwrite = await confirm({\n\t\t\t\t\tmessage: `Would you like to ${color.bold.red('overwrite')} all existing components?`,\n\t\t\t\t\tactive: 'Yes, overwrite everything',\n\t\t\t\t\tinactive: 'No, let me decide individually',\n\t\t\t\t\tinitialValue: false,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(overwrite)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\toverwriteAll = overwrite;\n\t\t\t}\n\n\t\t\tif (!overwriteAll) {\n\t\t\t\tconst result = await confirm({\n\t\t\t\t\tmessage: `${color.cyan(shortSpecifier)} already exists in your project would you like to overwrite it?`,\n\t\t\t\t\tinitialValue: false,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(result)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\t// just skip this block if they don't want to overwrite it\n\t\t\t\tif (!result) continue;\n\t\t\t}\n\t\t}\n\n\t\taddedBlocks.push(shortSpecifier);\n\n\t\ttasks.push({\n\t\t\trun: async ({ message }) => {\n\t\t\t\tmessage(`Adding ${color.cyan(fullSpecifier)}`);\n\n\t\t\t\tverbose(`Creating directory ${color.bold(directory)}`);\n\n\t\t\t\t// in case the directory didn't already exist\n\t\t\t\tfs.mkdirSync(directory, { recursive: true });\n\n\t\t\t\tverbose(`Created directory ${color.bold(directory)}`);\n\n\t\t\t\tconst files: { content: string; destPath: string }[] = [];\n\n\t\t\t\tconst getSourceFile = async (filePath: string) => {\n\t\t\t\t\tconst content = await registry.fetchRaw(providerInfo, filePath, {\n\t\t\t\t\t\tverbose,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (content.isErr()) {\n\t\t\t\t\t\tloading.stop(color.red(`Error fetching ${color.bold(filePath)}`));\n\t\t\t\t\t\tprogram.error(\n\t\t\t\t\t\t\tcolor.red(`There was an error trying to get ${fullSpecifier}`)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn content.unwrap();\n\t\t\t\t};\n\n\t\t\t\tfor (const sourceFile of block.files) {\n\t\t\t\t\tif (!config.includeTests && isTestFile(sourceFile)) continue;\n\n\t\t\t\t\tconst sourcePath = path.join(block.directory, sourceFile);\n\n\t\t\t\t\tlet destPath: string;\n\t\t\t\t\tif (block.subdirectory) {\n\t\t\t\t\t\tdestPath = path.join(directory, block.name, sourceFile);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestPath = path.join(directory, sourceFile);\n\t\t\t\t\t}\n\n\t\t\t\t\tverbose(`Adding ${color.bold(sourcePath)}`);\n\n\t\t\t\t\tconst content = await getSourceFile(sourcePath);\n\n\t\t\t\t\tconst pathFolder = destPath.slice(0, destPath.length - sourceFile.length);\n\n\t\t\t\t\tverbose(`Creating directory ${color.bold(pathFolder)}`);\n\n\t\t\t\t\tfs.mkdirSync(pathFolder, {\n\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t});\n\n\t\t\t\t\tverbose(`Created directory ${color.bold(pathFolder)}`);\n\n\t\t\t\t\tfiles.push({ content, destPath });\n\n\t\t\t\t\tverbose(`Got ${color.bold(sourcePath)}`);\n\t\t\t\t}\n\n\t\t\t\tfor (const file of files) {\n\t\t\t\t\tconst content = await transformRemoteContent({\n\t\t\t\t\t\tfile,\n\t\t\t\t\t\tbiomeOptions,\n\t\t\t\t\t\tprettierOptions,\n\t\t\t\t\t\tconfig,\n\t\t\t\t\t\timports: block._imports_,\n\t\t\t\t\t\twatermark,\n\t\t\t\t\t\tverbose,\n\t\t\t\t\t\tcwd: options.cwd,\n\t\t\t\t\t});\n\n\t\t\t\t\tif (content.isErr()) {\n\t\t\t\t\t\tprogram.error(color.red(content.unwrapErr()));\n\t\t\t\t\t}\n\n\t\t\t\t\tverbose(`Writing to ${color.bold(file.destPath)}`);\n\n\t\t\t\t\tfs.writeFileSync(file.destPath, content.unwrap());\n\t\t\t\t}\n\n\t\t\t\tif (config.includeTests && block.tests) {\n\t\t\t\t\tverbose('Trying to include tests');\n\n\t\t\t\t\tconst { devDependencies } = JSON.parse(\n\t\t\t\t\t\tfs.readFileSync(path.join(options.cwd, 'package.json')).toString()\n\t\t\t\t\t);\n\n\t\t\t\t\tif (devDependencies === undefined || devDependencies.vitest === undefined) {\n\t\t\t\t\t\tdevDeps.add('vitest');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const dep of block.devDependencies) {\n\t\t\t\t\tdevDeps.add(dep);\n\t\t\t\t}\n\n\t\t\t\tfor (const dep of block.dependencies) {\n\t\t\t\t\tdeps.add(dep);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tawait runTasksConcurrently({\n\t\tstartMessage: 'Adding blocks',\n\t\tstopMessage: `Added ${color.cyan(addedBlocks.join(', '))}`,\n\t\ttasks,\n\t\tverbose: options.verbose ? verbose : undefined,\n\t});\n\n\t// check if dependencies are already installed\n\tconst requiredDependencies = returnShouldInstall(deps, devDeps, { cwd: options.cwd });\n\n\tdeps = requiredDependencies.dependencies;\n\tdevDeps = requiredDependencies.devDependencies;\n\n\tconst hasDependencies = deps.size > 0 || devDeps.size > 0;\n\n\tif (hasDependencies) {\n\t\tlet install = options.yes;\n\t\tif (!options.yes) {\n\t\t\tconst result = await confirm({\n\t\t\t\tmessage: 'Would you like to install dependencies?',\n\t\t\t\tinitialValue: true,\n\t\t\t});\n\n\t\t\tif (isCancel(result)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tinstall = result;\n\t\t}\n\n\t\tif (install) {\n\t\t\tif (deps.size > 0) {\n\t\t\t\tif (!options.verbose)\n\t\t\t\t\tloading.start(`Installing dependencies with ${color.cyan(pm)}`);\n\n\t\t\t\t(\n\t\t\t\t\tawait installDependencies({\n\t\t\t\t\t\tpm,\n\t\t\t\t\t\tdeps: Array.from(deps),\n\t\t\t\t\t\tdev: false,\n\t\t\t\t\t\tcwd: options.cwd,\n\t\t\t\t\t})\n\t\t\t\t).match(\n\t\t\t\t\t(installed) => {\n\t\t\t\t\t\tif (!options.verbose)\n\t\t\t\t\t\t\tloading.stop(`Installed ${color.cyan(installed.join(', '))}`);\n\t\t\t\t\t},\n\t\t\t\t\t(err) => {\n\t\t\t\t\t\tif (!options.verbose) loading.stop('Failed to install dependencies');\n\n\t\t\t\t\t\tprogram.error(err);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (devDeps.size > 0) {\n\t\t\t\tif (!options.verbose)\n\t\t\t\t\tloading.start(`Installing dependencies with ${color.cyan(pm)}`);\n\n\t\t\t\t(\n\t\t\t\t\tawait installDependencies({\n\t\t\t\t\t\tpm,\n\t\t\t\t\t\tdeps: Array.from(devDeps),\n\t\t\t\t\t\tdev: true,\n\t\t\t\t\t\tcwd: options.cwd,\n\t\t\t\t\t})\n\t\t\t\t).match(\n\t\t\t\t\t(installed) => {\n\t\t\t\t\t\tif (!options.verbose)\n\t\t\t\t\t\t\tloading.stop(`Installed ${color.cyan(installed.join(', '))}`);\n\t\t\t\t\t},\n\t\t\t\t\t(err) => {\n\t\t\t\t\t\tif (!options.verbose) loading.stop('Failed to install dev dependencies');\n\n\t\t\t\t\t\tprogram.error(err);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// next steps if they didn't install dependencies\n\t\tlet steps = [];\n\n\t\tif (!install) {\n\t\t\tif (deps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...deps]);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (devDeps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...devDeps, '-D']);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dev dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// put steps with numbers above here\n\t\tsteps = steps.map((step, i) => `${i + 1}. ${step}`);\n\n\t\tif (!install) {\n\t\t\tsteps.push('');\n\t\t}\n\n\t\tsteps.push('Import and use the blocks!');\n\n\t\tconst next = nextSteps(steps);\n\n\t\tprocess.stdout.write(next);\n\t}\n};\n\nexport { add };\n","import { cancel, confirm, isCancel, outro, password, select } from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, Option } from 'commander';\nimport * as v from 'valibot';\nimport { context } from '../cli';\nimport * as ascii from '../utils/ascii';\nimport * as persisted from '../utils/persisted';\nimport { intro } from '../utils/prompts';\nimport { http, providers } from '../utils/registry-providers/internal';\n\nconst schema = v.object({\n\ttoken: v.optional(v.string()),\n\tprovider: v.optional(v.string()),\n\tlogout: v.boolean(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst authProviders = providers.filter((p) => p.name !== http.name);\n\nconst auth = new Command('auth')\n\t.description('Provide a token for access to private repositories.')\n\t.option('--token <token>', 'The token to use for authenticating to your provider.')\n\t.addOption(\n\t\tnew Option('--provider <name>', 'The provider this token belongs to.').choices(\n\t\t\tauthProviders.map((provider) => provider.name)\n\t\t)\n\t)\n\t.option('--logout', 'Erase tokens from each provider from storage.', false)\n\t.action(async (opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tintro(context);\n\n\t\tawait _auth(options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _auth = async (options: Options) => {\n\tconst storage = persisted.get();\n\n\tif (options.logout) {\n\t\tfor (const provider of authProviders) {\n\t\t\tconst tokenKey = `${provider.name}-token`;\n\n\t\t\tif (storage.get(tokenKey) === undefined) {\n\t\t\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\t\t\t\tprocess.stdout.write(\n\t\t\t\t\tcolor.gray(`${ascii.VERTICAL_LINE}  Already logged out of ${provider.name}.\\n`)\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst response = await confirm({\n\t\t\t\tmessage: `Remove ${provider.name} token?`,\n\t\t\t\tinitialValue: true,\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tif (!response) continue;\n\n\t\t\tstorage.delete(tokenKey);\n\t\t}\n\t\treturn;\n\t}\n\n\tif (authProviders.length > 1) {\n\t\tconst response = await select({\n\t\t\tmessage: 'Which provider is this token for?',\n\t\t\toptions: authProviders.map((provider) => ({\n\t\t\t\tlabel: provider.name,\n\t\t\t\tvalue: provider.name,\n\t\t\t})),\n\t\t\tinitialValue: authProviders[0].name,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\toptions.provider = response;\n\t} else {\n\t\toptions.provider = authProviders[0].name;\n\t}\n\n\tif (options.token === undefined) {\n\t\tconst response = await password({\n\t\t\tmessage: 'Paste your token',\n\t\t\tvalidate(value) {\n\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t},\n\t\t});\n\n\t\tif (isCancel(response) || !response) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\toptions.token = response;\n\t}\n\n\tstorage.set(`${options.provider}-token`, options.token);\n};\n\nexport { auth };\n","import fs from 'node:fs';\nimport { log, outro, spinner } from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, program } from 'commander';\nimport ignore from 'ignore';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { context } from '../cli';\nimport { MANIFEST_FILE } from '../constants';\nimport type { Category, Manifest } from '../types';\nimport * as ascii from '../utils/ascii';\nimport { buildBlocksDirectory, pruneUnused } from '../utils/build';\nimport { DEFAULT_CONFIG, runRules } from '../utils/build/check';\nimport { type RegistryConfig, getRegistryConfig } from '../utils/config';\nimport { parseManifest } from '../utils/manifest';\nimport { intro } from '../utils/prompts';\n\n// sensible defaults for ignored directories\nconst IGNORED_DIRS = ['.git', 'node_modules'] as const;\n\nconst schema = v.object({\n\tdirs: v.optional(v.array(v.string())),\n\toutputDir: v.optional(v.string()),\n\tincludeBlocks: v.optional(v.array(v.string())),\n\tincludeCategories: v.optional(v.array(v.string())),\n\texcludeBlocks: v.optional(v.array(v.string())),\n\texcludeCategories: v.optional(v.array(v.string())),\n\texcludeDeps: v.optional(v.array(v.string())),\n\tlistBlocks: v.optional(v.array(v.string())),\n\tlistCategories: v.optional(v.array(v.string())),\n\tdoNotListBlocks: v.optional(v.array(v.string())),\n\tdoNotListCategories: v.optional(v.array(v.string())),\n\tallowSubdirectories: v.optional(v.boolean()),\n\tpreview: v.optional(v.boolean()),\n\toutput: v.boolean(),\n\tverbose: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst build = new Command('build')\n\t.description(`Builds the provided --dirs in the project root into a \\`${MANIFEST_FILE}\\` file.`)\n\t.option('--dirs [dirs...]', 'The directories containing the blocks.')\n\t.option(\n\t\t'--output-dir <dir>',\n\t\t'The directory to output the registry to. (Copies jsrepo-manifest.json + all required files)'\n\t)\n\t.option('--include-blocks [blockNames...]', 'Include only the blocks with these names.')\n\t.option(\n\t\t'--include-categories [categoryNames...]',\n\t\t'Include only the categories with these names.'\n\t)\n\t.option('--exclude-blocks [blockNames...]', 'Do not include the blocks with these names.')\n\t.option(\n\t\t'--exclude-categories [categoryNames...]',\n\t\t'Do not include the categories with these names.'\n\t)\n\t.option('--list-blocks [blockNames...]', 'List only the blocks with these names.')\n\t.option('--list-categories [categoryNames...]', 'List only the categories with these names.')\n\t.option('--do-not-list-blocks [blockNames...]', 'Do not list the blocks with these names.')\n\t.option(\n\t\t'--do-not-list-categories [categoryNames...]',\n\t\t'Do not list the categories with these names.'\n\t)\n\t.option('--exclude-deps [deps...]', 'Dependencies that should not be added.')\n\t.option('--allow-subdirectories', 'Allow subdirectories to be built.')\n\t.option('--preview', 'Display a preview of the blocks list.')\n\t.option('--no-output', `Do not output a \\`${MANIFEST_FILE}\\` file.`)\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tintro(context);\n\n\t\tawait _build(options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _build = async (options: Options) => {\n\tconst loading = spinner();\n\n\tlet categories: Category[] = [];\n\n\tconst config: RegistryConfig = getRegistryConfig(options.cwd).match(\n\t\t(val) => {\n\t\t\tif (val === null) {\n\t\t\t\treturn {\n\t\t\t\t\t$schema: '',\n\t\t\t\t\tdirs: options.dirs ?? [],\n\t\t\t\t\toutputDir: options.outputDir,\n\t\t\t\t\tdoNotListBlocks: options.doNotListBlocks ?? [],\n\t\t\t\t\tdoNotListCategories: options.doNotListCategories ?? [],\n\t\t\t\t\tlistBlocks: options.listBlocks ?? [],\n\t\t\t\t\tlistCategories: options.listCategories ?? [],\n\t\t\t\t\texcludeDeps: options.excludeDeps ?? [],\n\t\t\t\t\tincludeBlocks: options.includeBlocks ?? [],\n\t\t\t\t\tincludeCategories: options.includeCategories ?? [],\n\t\t\t\t\texcludeBlocks: options.excludeBlocks ?? [],\n\t\t\t\t\texcludeCategories: options.excludeCategories ?? [],\n\t\t\t\t\tallowSubdirectories: options.allowSubdirectories,\n\t\t\t\t\tpreview: options.preview,\n\t\t\t\t} satisfies RegistryConfig;\n\t\t\t}\n\n\t\t\tconst mergedVal = val;\n\n\t\t\t// overwrites config with flag values\n\n\t\t\tif (options.dirs) mergedVal.dirs = options.dirs;\n\t\t\tif (options.outputDir) mergedVal.outputDir = options.outputDir;\n\t\t\tif (options.doNotListBlocks) mergedVal.doNotListBlocks = options.doNotListBlocks;\n\t\t\tif (options.doNotListCategories)\n\t\t\t\tmergedVal.doNotListCategories = options.doNotListCategories;\n\t\t\tif (options.listBlocks) mergedVal.listBlocks = options.listBlocks;\n\t\t\tif (options.listCategories) mergedVal.listCategories = options.listCategories;\n\t\t\tif (options.includeBlocks) mergedVal.includeBlocks = options.includeBlocks;\n\t\t\tif (options.includeCategories) mergedVal.includeCategories = options.includeCategories;\n\t\t\tif (options.excludeBlocks) mergedVal.excludeBlocks = options.excludeBlocks;\n\t\t\tif (options.excludeCategories) mergedVal.excludeCategories = options.excludeCategories;\n\t\t\tif (options.excludeDeps) mergedVal.excludeDeps = options.excludeDeps;\n\t\t\tif (options.allowSubdirectories !== undefined)\n\t\t\t\tmergedVal.allowSubdirectories = options.allowSubdirectories;\n\t\t\tif (options.preview !== undefined) mergedVal.preview = options.preview;\n\n\t\t\tmergedVal.rules = { ...DEFAULT_CONFIG, ...mergedVal.rules };\n\n\t\t\treturn mergedVal;\n\t\t},\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tlet outDir: string;\n\n\tif (config.outputDir) {\n\t\toutDir = path.join(options.cwd, config.outputDir);\n\t} else {\n\t\toutDir = options.cwd;\n\t}\n\n\tconst manifestOut = path.join(outDir, MANIFEST_FILE);\n\n\tif (options.output && fs.existsSync(manifestOut)) {\n\t\t// we need to remove all previously copied directories\n\t\tif (config.outputDir) {\n\t\t\t// read old manifest to determine where the unwanted files are\n\t\t\t// we can't just rm -rf because other static files could be hosted out of the same directory\n\t\t\tconst oldManifest = parseManifest(fs.readFileSync(manifestOut).toString());\n\n\t\t\tif (oldManifest.isOk()) {\n\t\t\t\t// first just remove all the files\n\t\t\t\tfor (const category of oldManifest.unwrap().categories) {\n\t\t\t\t\tfor (const block of category.blocks) {\n\t\t\t\t\t\tconst newDirPath = path.join(outDir, block.directory);\n\n\t\t\t\t\t\tif (fs.existsSync(newDirPath)) {\n\t\t\t\t\t\t\tfs.rmSync(newDirPath, { recursive: true });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfs.rmSync(manifestOut);\n\t}\n\n\tconst ig = ignore();\n\n\ttry {\n\t\tconst ignoreFile = fs.readFileSync(path.join(options.cwd, '.gitignore')).toString();\n\n\t\tig.add(ignoreFile);\n\t} catch {\n\t\t// just continue on\n\t}\n\n\tig.add(IGNORED_DIRS);\n\n\tfor (const dir of config.dirs) {\n\t\tconst dirPath = path.join(options.cwd, dir);\n\n\t\tloading.start(`Building ${color.cyan(dirPath)}`);\n\n\t\tconst builtCategories = buildBlocksDirectory(dirPath, {\n\t\t\tcwd: options.cwd,\n\t\t\tignore: ig,\n\t\t\tconfig,\n\t\t});\n\n\t\tfor (const category of builtCategories) {\n\t\t\tif (categories.find((cat) => cat.name === category.name) !== undefined) {\n\t\t\t\tconst error = 'a category with the same name already exists!';\n\n\t\t\t\tconsole.warn(\n\t\t\t\t\t`${ascii.VERTICAL_LINE}  ${ascii.WARN} Skipped adding \\`${color.cyan(`${dir}/${category.name}`)}\\` because ${error}`\n\t\t\t\t);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcategories.push(category);\n\t\t}\n\n\t\tloading.stop(`Built ${color.cyan(dirPath)}`);\n\t}\n\n\tconst manifest = createManifest(categories, config);\n\n\tloading.start('Checking manifest');\n\n\tconst { warnings, errors } = runRules(manifest, config, config.rules);\n\n\tloading.stop('Completed checking manifest.');\n\n\t// add gap for errors\n\tif (warnings.length > 0 || errors.length > 0) {\n\t\tconsole.log(ascii.VERTICAL_LINE);\n\t}\n\n\tfor (const warning of warnings) {\n\t\tconsole.log(warning);\n\t}\n\n\tif (errors.length > 0) {\n\t\tfor (const error of errors) {\n\t\t\tconsole.log(error);\n\t\t}\n\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`Completed checking manifest with ${color.bold(`${errors.length} error(s)`)} and ${color.bold(`${warnings.length} warning(s)`)}`\n\t\t\t)\n\t\t);\n\t}\n\n\t// removes any unused blocks or categories\n\tconst [prunedCategories, count] = pruneUnused(categories);\n\n\tcategories = prunedCategories;\n\n\tif (count > 0) {\n\t\tlog.step(`Removed ${count} unused block${count > 1 ? 's' : ''}.`);\n\t}\n\n\tif (config.preview) {\n\t\tconst blocks = categories.flatMap((cat) =>\n\t\t\tcat.blocks.filter((b) => b.list).map((b) => `${color.cyan(b.category)}/${b.name}`)\n\t\t);\n\n\t\tlog.message(`${color.yellow('Preview')}:`);\n\n\t\tfor (const block of blocks) {\n\t\t\tconsole.log(`${ascii.VERTICAL_LINE}  ◻ ${block}`);\n\t\t}\n\t}\n\n\tif (options.output) {\n\t\tif (config.outputDir) {\n\t\t\tloading.start(`Copying registry files to \\`${color.cyan(outDir)}\\``);\n\n\t\t\t// copy the files for each block in each category\n\t\t\tfor (const category of categories) {\n\t\t\t\tfor (const block of category.blocks) {\n\t\t\t\t\tconst originalPath = path.join(options.cwd, block.directory);\n\t\t\t\t\tconst newDirPath = path.join(outDir, block.directory);\n\n\t\t\t\t\tfor (const file of block.files) {\n\t\t\t\t\t\tconst containing = path.join(newDirPath, file, '../');\n\n\t\t\t\t\t\tif (!fs.existsSync(containing)) {\n\t\t\t\t\t\t\tfs.mkdirSync(containing, { recursive: true });\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfs.copyFileSync(path.join(originalPath, file), path.join(newDirPath, file));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tloading.stop(`Copied registry files to \\`${color.cyan(outDir)}\\``);\n\t\t}\n\n\t\tloading.start(`Writing output to \\`${color.cyan(manifestOut)}\\``);\n\n\t\t// write manifest\n\t\tfs.writeFileSync(manifestOut, JSON.stringify(manifest, null, '\\t'));\n\n\t\tloading.stop(`Wrote output to \\`${color.cyan(manifestOut)}\\``);\n\t}\n};\n\nexport const createManifest = (categories: Category[], config: RegistryConfig) => {\n\tconst manifest: Manifest = {\n\t\tmeta: config.meta,\n\t\tcategories,\n\t};\n\n\treturn manifest;\n};\n\nexport { build };\n","import fs from 'node:fs';\nimport { cancel, confirm, isCancel, select, spinner } from '@clack/prompts';\nimport color from 'chalk';\nimport { Argument, Command, program } from 'commander';\nimport { execa } from 'execa';\nimport { resolveCommand } from 'package-manager-detector/commands';\nimport { detect } from 'package-manager-detector/detect';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { context } from '../cli';\nimport * as ascii from '../utils/ascii';\nimport { resolveTree } from '../utils/blocks';\nimport * as url from '../utils/blocks/utils/url';\nimport { isTestFile } from '../utils/build';\nimport { type ProjectConfig, getProjectConfig, resolvePaths } from '../utils/config';\nimport { installDependencies } from '../utils/dependencies';\nimport { type ConcurrentTask, intro, runTasksConcurrently } from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.objectWithRest(\n\t{\n\t\trepo: v.optional(v.string()),\n\t\tallow: v.boolean(),\n\t\tcwd: v.string(),\n\t},\n\tv.unknown()\n);\n\ntype Options = v.InferInput<typeof schema>;\n\nconst exec = new Command('exec')\n\t.alias('x')\n\t.description('Execute a block as a script.')\n\t.addArgument(\n\t\tnew Argument(\n\t\t\t'script',\n\t\t\t'Name of the script you want to execute. ex: (general/hello, github/ieedan/std/general/hello)'\n\t\t).argOptional()\n\t)\n\t.option('--repo <repo>', 'Repository to download and run the script from.')\n\t.option('-A, --allow', 'Allow jsrepo to download code from the provided repo.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.allowExcessArguments()\n\t.allowUnknownOption()\n\t.action(async (script, opts, command) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tintro(context);\n\n\t\tawait _exec(script, options, command);\n\t});\n\n// biome-ignore lint/suspicious/noExplicitAny: we don't have a type for command\nconst _exec = async (s: string | undefined, options: Options, command: any) => {\n\tlet script = s;\n\n\tconst loading = spinner();\n\n\tconst configResult = getProjectConfig(options.cwd);\n\n\t/** The user has opted for no config */\n\tconst noConfig = configResult.isErr();\n\n\tlet config: ProjectConfig;\n\n\tif (configResult.isErr()) {\n\t\t// add default config used for default values in prompts\n\t\tconfig = {\n\t\t\t$schema: '',\n\t\t\tincludeTests: false,\n\t\t\twatermark: true,\n\t\t\tpaths: {\n\t\t\t\t'*': './',\n\t\t\t},\n\t\t\trepos: [],\n\t\t};\n\t} else {\n\t\tconfig = configResult.unwrap();\n\t}\n\n\tlet repoPaths = config.repos;\n\n\t// we just want to override all others if supplied via the CLI\n\tif (options.repo) repoPaths = [options.repo];\n\n\tconst provider = script ? registry.selectProvider(script) : undefined;\n\n\t// we are only getting repos for blocks that specified repos\n\tif (script && provider) {\n\t\tconst { url: repo } = provider.parse(script, { fullyQualified: true });\n\n\t\tif (!repoPaths.find((repoPath) => repoPath === repo)) {\n\t\t\tif (!options.allow) {\n\t\t\t\tconst result = await confirm({\n\t\t\t\t\tmessage: `Allow ${ascii.JSREPO} to download and run code from ${color.cyan(repo)}?`,\n\t\t\t\t\tinitialValue: true,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(result) || !result) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trepoPaths = [repo];\n\t\t}\n\t}\n\n\tif (!options.allow && options.repo) {\n\t\tconst result = await confirm({\n\t\t\tmessage: `Allow ${ascii.JSREPO} to download and run code from ${color.cyan(options.repo)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\tif (repoPaths.length === 0) {\n\t\tif (noConfig) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`Fully quality your script ex: (github/ieedan/std/scripts/build) or provide the \\`${color.bold(\n\t\t\t\t\t\t'--repo'\n\t\t\t\t\t)}\\` flag to specify a registry.`\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`There were no repos present in your config and you didn't provide the \\`${color.bold(\n\t\t\t\t\t'--repo'\n\t\t\t\t)}\\` flag with a repo.`\n\t\t\t)\n\t\t);\n\t}\n\n\tloading.start(`Fetching scripts from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst resolvedRepos: registry.RegistryProviderState[] = (\n\t\tawait registry.forEachPathGetProviderState(...repoPaths)\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed to get info for ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tconst blocksMap = (await registry.fetchBlocks(...resolvedRepos)).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed fetching scripts from ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tloading.stop(`Retrieved scripts from ${color.cyan(repoPaths.join(', '))}`);\n\n\t// if no blocks are provided prompt the user for what blocks they want\n\tif (!script) {\n\t\tconst promptResult = await select({\n\t\t\tmessage: 'Select which script to run.',\n\t\t\toptions: Array.from(blocksMap.entries())\n\t\t\t\t.filter(([_, value]) => value.list)\n\t\t\t\t.map(([key, value]) => {\n\t\t\t\t\tlet label: string;\n\n\t\t\t\t\t// show the full repo if there are multiple repos\n\t\t\t\t\tif (repoPaths.length > 1) {\n\t\t\t\t\t\tlabel = `${color.cyan(url.join(value.sourceRepo.url, value.category))}/${value.name}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlabel = `${color.cyan(value.category)}/${value.name}`;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: label,\n\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t});\n\n\t\tif (isCancel(promptResult)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tscript = promptResult as string;\n\t}\n\n\tconst installingBlocks = (await resolveTree([script], blocksMap, resolvedRepos)).match(\n\t\t(val) => val,\n\t\t(err) => program.error(err)\n\t);\n\n\tconst tempDirBase = 'temp-jsrepo-exec';\n\n\tconst tempDirectoryRelative = `./${tempDirBase}/${encodeURIComponent(script)}`;\n\n\tconst tempDirectory = path.join(process.cwd(), tempDirectoryRelative);\n\n\tconfig.paths['*'] = tempDirectoryRelative;\n\n\tfs.mkdirSync(tempDirectory, { recursive: true });\n\n\tconst pm = (await detect({ cwd: process.cwd() }))?.agent ?? 'npm';\n\n\tconst tasks: ConcurrentTask[] = [];\n\n\tconst devDeps: Set<string> = new Set<string>();\n\tconst deps: Set<string> = new Set<string>();\n\n\tconst resolvedPathsResult = resolvePaths(config.paths, options.cwd);\n\n\tif (resolvedPathsResult.isErr()) {\n\t\tprogram.error(color.red(resolvedPathsResult.unwrapErr()));\n\t}\n\n\tconst resolvedPaths = resolvedPathsResult.unwrap();\n\n\tconst addedBlocks: string[] = [];\n\n\tfor (const { block } of installingBlocks) {\n\t\tconst fullSpecifier = `${block.sourceRepo.url}/${block.category}/${block.name}`;\n\t\tconst shortSpecifier = `${block.category}/${block.name}`;\n\n\t\tconst providerInfo = block.sourceRepo;\n\n\t\tconst directory = path.join(options.cwd, resolvedPaths['*'], block.category);\n\n\t\taddedBlocks.push(shortSpecifier);\n\n\t\ttasks.push({\n\t\t\trun: async ({ message }) => {\n\t\t\t\tmessage(`Adding ${color.cyan(fullSpecifier)}`);\n\n\t\t\t\t// in case the directory didn't already exist\n\t\t\t\tfs.mkdirSync(directory, { recursive: true });\n\n\t\t\t\tconst files: { content: string; destPath: string }[] = [];\n\n\t\t\t\tconst getSourceFile = async (filePath: string) => {\n\t\t\t\t\tconst content = await registry.fetchRaw(providerInfo, filePath);\n\n\t\t\t\t\tif (content.isErr()) {\n\t\t\t\t\t\tloading.stop(color.red(`Error fetching ${color.bold(filePath)}`));\n\t\t\t\t\t\tprogram.error(\n\t\t\t\t\t\t\tcolor.red(`There was an error trying to get ${fullSpecifier}`)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn content.unwrap();\n\t\t\t\t};\n\n\t\t\t\tfor (const sourceFile of block.files) {\n\t\t\t\t\tif (!config.includeTests && isTestFile(sourceFile)) continue;\n\n\t\t\t\t\tconst sourcePath = path.join(block.directory, sourceFile);\n\n\t\t\t\t\tlet destPath: string;\n\t\t\t\t\tif (block.subdirectory) {\n\t\t\t\t\t\tdestPath = path.join(directory, block.name, sourceFile);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdestPath = path.join(directory, sourceFile);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst content = await getSourceFile(sourcePath);\n\n\t\t\t\t\tconst pathFolder = destPath.slice(0, destPath.length - sourceFile.length);\n\n\t\t\t\t\tfs.mkdirSync(pathFolder, {\n\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t});\n\n\t\t\t\t\tfiles.push({ content, destPath });\n\t\t\t\t}\n\n\t\t\t\tfor (const file of files) {\n\t\t\t\t\tfs.writeFileSync(file.destPath, file.content);\n\t\t\t\t}\n\n\t\t\t\tif (config.includeTests && block.tests) {\n\t\t\t\t\tconst { devDependencies } = JSON.parse(\n\t\t\t\t\t\tfs.readFileSync(path.join(options.cwd, 'package.json')).toString()\n\t\t\t\t\t);\n\n\t\t\t\t\tif (devDependencies === undefined || devDependencies.vitest === undefined) {\n\t\t\t\t\t\tdevDeps.add('vitest');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const dep of block.devDependencies) {\n\t\t\t\t\tdevDeps.add(dep);\n\t\t\t\t}\n\n\t\t\t\tfor (const dep of block.dependencies) {\n\t\t\t\t\tdeps.add(dep);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tawait runTasksConcurrently({\n\t\tstartMessage: 'Adding blocks',\n\t\tstopMessage: `Added ${color.cyan(addedBlocks.join(', '))}`,\n\t\ttasks,\n\t});\n\n\tconst hasDependencies = deps.size > 0 || devDeps.size > 0;\n\n\tif (hasDependencies) {\n\t\t// add package.json\n\t\tconst packageContent = {\n\t\t\tname: 'temp-package',\n\t\t\ttype: 'module',\n\t\t\tversion: '0.0.1',\n\t\t};\n\n\t\tconst packagePath = path.join(tempDirectory, 'package.json');\n\n\t\tfs.writeFileSync(packagePath, JSON.stringify(packageContent, null, '\\t'));\n\n\t\tif (deps.size > 0) {\n\t\t\tif (!options.verbose) loading.start(`Installing dependencies with ${color.cyan(pm)}`);\n\n\t\t\t(\n\t\t\t\tawait installDependencies({\n\t\t\t\t\tpm,\n\t\t\t\t\tdeps: Array.from(deps),\n\t\t\t\t\tdev: false,\n\t\t\t\t\tcwd: tempDirectory,\n\t\t\t\t\tignoreWorkspace: true,\n\t\t\t\t})\n\t\t\t).match(\n\t\t\t\t(installed) => {\n\t\t\t\t\tif (!options.verbose)\n\t\t\t\t\t\tloading.stop(`Installed ${color.cyan(installed.join(', '))}`);\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tif (!options.verbose) loading.stop('Failed to install dependencies');\n\n\t\t\t\t\tprogram.error(err);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\tif (devDeps.size > 0) {\n\t\t\tif (!options.verbose) loading.start(`Installing dependencies with ${color.cyan(pm)}`);\n\n\t\t\t(\n\t\t\t\tawait installDependencies({\n\t\t\t\t\tpm,\n\t\t\t\t\tdeps: Array.from(devDeps),\n\t\t\t\t\tdev: true,\n\t\t\t\t\tcwd: tempDirectory,\n\t\t\t\t\tignoreWorkspace: true,\n\t\t\t\t})\n\t\t\t).match(\n\t\t\t\t(installed) => {\n\t\t\t\t\tif (!options.verbose)\n\t\t\t\t\t\tloading.stop(`Installed ${color.cyan(installed.join(', '))}`);\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tif (!options.verbose) loading.stop('Failed to install dev dependencies');\n\n\t\t\t\t\tprogram.error(err);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tconst startIndex = (command.parent.rawArgs as string[]).findIndex((arg) => arg === '--');\n\n\tlet passthroughArgs: string[] = [];\n\n\tif (startIndex !== -1) {\n\t\tpassthroughArgs = command.parent.rawArgs.slice(startIndex + 1);\n\t}\n\n\t// run the cli\n\n\tconsole.clear();\n\n\tconst runningBlock = installingBlocks[0];\n\n\tlet file: string;\n\n\t// tsx seems to be smart enough to figure out if it is a .ts file\n\tif (runningBlock.block.subdirectory) {\n\t\tfile = path.join(\n\t\t\ttempDirectory,\n\t\t\t`${runningBlock.block.category}/${runningBlock.block.name}/index.js`\n\t\t);\n\t} else {\n\t\tfile = path.join(\n\t\t\ttempDirectory,\n\t\t\t`${runningBlock.block.category}/${runningBlock.block.name}.js`\n\t\t);\n\t}\n\n\tconst cmd = resolveCommand(pm, 'execute', ['tsx', file, ...passthroughArgs]);\n\n\tif (!cmd) {\n\t\tprogram.error(color.red('Error resolving run command!'));\n\t}\n\n\ttry {\n\t\tawait execa(cmd.command, cmd.args, {\n\t\t\tcwd: process.cwd(),\n\t\t\tstdin: process.stdin,\n\t\t\tstdout: process.stdout,\n\t\t});\n\t} finally {\n\t\tfs.rmSync(path.join(process.cwd(), tempDirBase), { recursive: true, force: true });\n\t}\n};\n\nexport { exec };\n","import fs from 'node:fs';\nimport {\n\tcancel,\n\tconfirm,\n\tisCancel,\n\tlog,\n\tmultiselect,\n\toutro,\n\tpassword,\n\tselect,\n\tspinner,\n\ttext,\n} from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, Option, program } from 'commander';\nimport { detect, resolveCommand } from 'package-manager-detector';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { context } from '../cli';\nimport * as ascii from '../utils/ascii';\nimport {\n\ttype Formatter,\n\tPROJECT_CONFIG_NAME,\n\ttype Paths,\n\ttype ProjectConfig,\n\tREGISTRY_CONFIG_NAME,\n\tformatterSchema,\n\tgetProjectConfig,\n\tgetRegistryConfig,\n} from '../utils/config';\nimport { installDependencies } from '../utils/dependencies';\nimport { loadFormatterConfig } from '../utils/format';\nimport { json } from '../utils/language-support';\nimport * as persisted from '../utils/persisted';\nimport { type Task, intro, nextSteps, runTasks } from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.object({\n\trepos: v.optional(v.array(v.string())),\n\twatermark: v.boolean(),\n\ttests: v.optional(v.boolean()),\n\tformatter: v.optional(formatterSchema),\n\tproject: v.optional(v.boolean()),\n\tregistry: v.optional(v.boolean()),\n\tscript: v.string(),\n\tyes: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst init = new Command('init')\n\t.description('Initializes your project with a configuration file.')\n\t.argument('[registries...]', 'Registries to install the blocks from.', [])\n\t.option('--repos [repos...]', 'Repository to install the blocks from. (DEPRECATED)')\n\t.option(\n\t\t'--no-watermark',\n\t\t'Will not add a watermark to each file upon adding it to your project.'\n\t)\n\t.option('--tests', 'Will include tests with the blocks.')\n\t.addOption(\n\t\tnew Option(\n\t\t\t'--formatter <formatter>',\n\t\t\t'What formatter to use when adding or updating blocks.'\n\t\t).choices(['prettier', 'biome'])\n\t)\n\t.option('-P, --project', 'Takes you through the steps to initialize a project.')\n\t.option('-R, --registry', 'Takes you through the steps to initialize a registry.')\n\t.option(\n\t\t'--script <name>',\n\t\t'The name of the build script. (For Registry setup)',\n\t\t'build:registry'\n\t)\n\t.option('-y, --yes', 'Skip confirmation prompt.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (registries, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tintro(context);\n\n\t\tif (options.registry !== undefined && options.project !== undefined) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`You cannot provide both ${color.bold('--project')} and ${color.bold('--registry')} at the same time.`\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (options.repos !== undefined) {\n\t\t\tlog.warn(\n\t\t\t\t`The ${color.gray('`--repos`')} flag is deprecated! Instead supply registries as arguments. ${color.cyan(`\\`jsrepo init ${options.repos.join(' ')}\\``)}`\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\toptions.registry === undefined &&\n\t\t\toptions.project === undefined &&\n\t\t\tregistries.length === 0\n\t\t) {\n\t\t\tconst response = await select({\n\t\t\t\tmessage: 'Initialize a project or registry?',\n\t\t\t\toptions: [\n\t\t\t\t\t{ value: 'project', label: 'project' },\n\t\t\t\t\t{ value: 'registry', label: 'registry' },\n\t\t\t\t],\n\t\t\t\tinitialValue: 'project',\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\toptions.project = response === 'project';\n\t\t}\n\n\t\tif (options.project || registries.length > 0) {\n\t\t\tawait _initProject(registries, options);\n\t\t} else {\n\t\t\tawait _initRegistry(options);\n\t\t}\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _initProject = async (registries: string[], options: Options) => {\n\tconst initialConfig = getProjectConfig(options.cwd);\n\n\tconst loading = spinner();\n\n\tlet paths: Paths;\n\n\tconst defaultPathResult = await text({\n\t\tmessage: 'Please enter a default path to install the blocks',\n\t\tvalidate(value) {\n\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t},\n\t\tplaceholder: './src/blocks',\n\t\tinitialValue: initialConfig.isOk() ? initialConfig.unwrap().paths['*'] : undefined,\n\t});\n\n\tif (isCancel(defaultPathResult)) {\n\t\tcancel('Canceled!');\n\t\tprocess.exit(0);\n\t}\n\n\tif (initialConfig.isOk()) {\n\t\tpaths = { ...initialConfig.unwrap().paths, '*': defaultPathResult };\n\t} else {\n\t\tpaths = { '*': defaultPathResult };\n\t}\n\n\tconst repos = [\n\t\t...(initialConfig.isOk() ? initialConfig.unwrap().repos : []),\n\t\t...registries,\n\t\t...(options.repos ?? []),\n\t];\n\n\tif (repos.length > 0) {\n\t\tfor (const repo of repos) {\n\t\t\t// if already present in config ask if you would like to set it up\n\t\t\tif (initialConfig.isOk() && initialConfig.unwrap().repos.find((r) => r === repo)) {\n\t\t\t\tconst confirmResult = await confirm({\n\t\t\t\t\tmessage: `Configure ${repo}?`,\n\t\t\t\t\tinitialValue: options.yes,\n\t\t\t\t});\n\n\t\t\t\tif (isCancel(confirmResult)) {\n\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\tprocess.exit(0);\n\t\t\t\t}\n\n\t\t\t\tif (!confirmResult) continue;\n\t\t\t}\n\n\t\t\tlog.info(`Configuring ${color.cyan(repo)}`);\n\n\t\t\tpaths = await promptForProviderConfig(repo, paths);\n\t\t}\n\t}\n\n\twhile (true) {\n\t\tconst confirmResult = await confirm({\n\t\t\tmessage: `Add ${repos.length > 0 ? 'another' : 'a'} repo?`,\n\t\t\tinitialValue: repos.length === 0, // default to yes for first repo\n\t\t});\n\n\t\tif (isCancel(confirmResult)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (!confirmResult) break;\n\n\t\tconst result = await text({\n\t\t\tmessage: 'Where should we download the blocks from?',\n\t\t\tplaceholder: 'github/ieedan/std',\n\t\t\tvalidate: (val) => {\n\t\t\t\tif (val.trim().length === 0) return 'Please provide a value';\n\n\t\t\t\tif (!registry.selectProvider(val)) {\n\t\t\t\t\treturn `Invalid provider! Valid providers (${registry.providers.map((provider) => provider.name).join(', ')})`;\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\n\t\tif (isCancel(result)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tpaths = await promptForProviderConfig(result, paths);\n\n\t\trepos.push(result);\n\t}\n\n\t// configure formatter\n\tif (!options.formatter) {\n\t\tlet defaultFormatter = initialConfig.isErr()\n\t\t\t? 'none'\n\t\t\t: (initialConfig.unwrap().formatter ?? 'none');\n\n\t\tif (fs.existsSync(path.join(options.cwd, '.prettierrc'))) {\n\t\t\tdefaultFormatter = 'prettier';\n\t\t}\n\n\t\tif (fs.existsSync(path.join(options.cwd, 'biome.json'))) {\n\t\t\tdefaultFormatter = 'biome';\n\t\t}\n\n\t\tconst response = await select({\n\t\t\tmessage: 'What formatter would you like to use?',\n\t\t\toptions: ['Prettier', 'Biome', 'None'].map((val) => ({\n\t\t\t\tvalue: val.toLowerCase(),\n\t\t\t\tlabel: val,\n\t\t\t})),\n\t\t\tinitialValue: defaultFormatter,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (response !== 'none') {\n\t\t\toptions.formatter = response as Formatter;\n\t\t}\n\t}\n\n\tconst config: ProjectConfig = {\n\t\t$schema: `https://unpkg.com/jsrepo@${context.package.version}/schemas/project-config.json`,\n\t\trepos,\n\t\tincludeTests:\n\t\t\tinitialConfig.isOk() && options.tests === undefined\n\t\t\t\t? initialConfig.unwrap().includeTests\n\t\t\t\t: (options.tests ?? false),\n\t\twatermark: options.watermark,\n\t\tformatter: options.formatter,\n\t\tpaths,\n\t};\n\n\tloading.start(`Writing config to \\`${PROJECT_CONFIG_NAME}\\``);\n\n\tconst { prettierOptions, biomeOptions } = await loadFormatterConfig({\n\t\tformatter: config.formatter,\n\t\tcwd: options.cwd,\n\t});\n\n\tconst configPath = path.join(options.cwd, PROJECT_CONFIG_NAME);\n\n\tconst configContent = await json.format(JSON.stringify(config, null, '\\t'), {\n\t\tbiomeOptions,\n\t\tprettierOptions,\n\t\tfilePath: configPath,\n\t\tformatter: config.formatter,\n\t});\n\n\tif (!fs.existsSync(options.cwd)) {\n\t\tfs.mkdirSync(options.cwd, { recursive: true });\n\t}\n\n\tfs.writeFileSync(configPath, configContent);\n\n\tloading.stop(`Wrote config to \\`${PROJECT_CONFIG_NAME}\\`.`);\n};\n\nconst promptForProviderConfig = async (repo: string, paths: Paths): Promise<Paths> => {\n\tconst loading = spinner();\n\n\tconst storage = persisted.get();\n\n\tconst provider = registry.selectProvider(repo);\n\n\tif (!provider) {\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`Invalid provider! Valid providers (${registry.providers.map((provider) => provider.name).join(', ')})`\n\t\t\t)\n\t\t);\n\t}\n\n\tconst tokenKey = `${provider.name}-token`;\n\n\tconst token = storage.get(tokenKey);\n\n\t// don't ask if the provider is a custom domain\n\tif (!token && provider.name !== registry.http.name) {\n\t\tconst result = await confirm({\n\t\t\tmessage: 'Would you like to add an auth token?',\n\t\t\tinitialValue: false,\n\t\t});\n\n\t\tif (isCancel(result)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (result) {\n\t\t\tconst response = await password({\n\t\t\t\tmessage: 'Paste your token',\n\t\t\t\tvalidate(value) {\n\t\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tstorage.set(tokenKey, response);\n\t\t}\n\t}\n\n\tloading.start(`Fetching categories from ${color.cyan(repo)}`);\n\n\tconst providerState = await registry.getProviderState(repo);\n\n\tif (providerState.isErr()) {\n\t\tprogram.error(color.red(providerState.unwrapErr()));\n\t}\n\n\tconst manifestResult = await registry.fetchManifest(providerState.unwrap());\n\n\tloading.stop(`Fetched categories from ${color.cyan(repo)}`);\n\n\tif (manifestResult.isErr()) {\n\t\tprogram.error(color.red(manifestResult.unwrapErr()));\n\t}\n\n\tconst manifest = manifestResult.unwrap();\n\n\tconst configurePaths = await multiselect({\n\t\tmessage: 'Which category paths would you like to configure?',\n\t\toptions: manifest.categories.map((cat) => ({ label: cat.name, value: cat.name })),\n\t\trequired: false,\n\t});\n\n\tif (isCancel(configurePaths)) {\n\t\tcancel('Canceled!');\n\t\tprocess.exit(0);\n\t}\n\n\tif (configurePaths.length > 0) {\n\t\tfor (const category of configurePaths) {\n\t\t\tconst configuredValue = paths[category];\n\n\t\t\tconst categoryPath = await text({\n\t\t\t\tmessage: `Where should ${category} be added in your project?`,\n\t\t\t\tvalidate(value) {\n\t\t\t\t\tif (value.trim() === '') return 'Please provide a value';\n\t\t\t\t},\n\t\t\t\tplaceholder: configuredValue ? configuredValue : `./src/${category}`,\n\t\t\t\tdefaultValue: configuredValue,\n\t\t\t\tinitialValue: configuredValue,\n\t\t\t});\n\n\t\t\tif (isCancel(categoryPath)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tpaths[category] = categoryPath;\n\t\t}\n\t}\n\n\treturn paths;\n};\n\nconst _initRegistry = async (options: Options) => {\n\tconst loading = spinner();\n\n\tconst packagePath = path.join(options.cwd, 'package.json');\n\n\tif (!fs.existsSync(packagePath)) {\n\t\tprogram.error(color.red(`Couldn't find your ${color.bold('package.json')}!`));\n\t}\n\n\tlet config = getRegistryConfig(options.cwd).match(\n\t\t(val) => val,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tconst noConfig = config === null;\n\n\tif (!config) {\n\t\tconfig = {\n\t\t\t$schema: '',\n\t\t\tdirs: [],\n\t\t\tdoNotListBlocks: [],\n\t\t\tdoNotListCategories: [],\n\t\t\tlistBlocks: [],\n\t\t\tlistCategories: [],\n\t\t\texcludeDeps: [],\n\t\t\tincludeBlocks: [],\n\t\t\tincludeCategories: [],\n\t\t\texcludeBlocks: [],\n\t\t\texcludeCategories: [],\n\t\t\tpreview: false,\n\t\t};\n\t}\n\n\tconfig.$schema = `https://unpkg.com/jsrepo@${context.package.version}/schemas/registry-config.json`;\n\n\twhile (true) {\n\t\tif (config.dirs.length > 0) {\n\t\t\tconst confirmResult = await confirm({\n\t\t\t\tmessage: 'Add another blocks directory?',\n\t\t\t\tinitialValue: false,\n\t\t\t});\n\n\t\t\tif (isCancel(confirmResult)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tif (!confirmResult) break;\n\t\t}\n\n\t\tconst response = await text({\n\t\t\tmessage: 'Where are your blocks located?',\n\t\t\tplaceholder: './src',\n\t\t\tdefaultValue: './src',\n\t\t\tinitialValue: './src',\n\t\t\tvalidate: (val) => {\n\t\t\t\tif (val.trim().length === 0) return 'Please provide a value!';\n\t\t\t},\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tconfig.dirs.push(response);\n\t}\n\n\tconst pkg = JSON.parse(fs.readFileSync(packagePath).toString());\n\n\t// continue asking until the user either chooses to overwrite or inputs a script that doesn't exist yet\n\twhile (!options.yes && pkg.scripts && pkg.scripts[options.script]) {\n\t\tconst response = await confirm({\n\t\t\tmessage: `The \\`${color.cyan(options.script)}\\` already exists overwrite?`,\n\t\t\tinitialValue: false,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tif (!response) {\n\t\t\tconst response = await text({\n\t\t\t\tmessage: 'What would you like to call the script?',\n\t\t\t\tplaceholder: 'build:registry',\n\t\t\t\tvalidate: (val) => {\n\t\t\t\t\tif (val.trim().length === 0) return 'Please provide a value!';\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\toptions.script = response;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tconst alreadyInstalled = pkg.devDependencies && pkg.devDependencies.jsrepo !== undefined;\n\n\tlet installAsDevDependency = options.yes || alreadyInstalled;\n\n\tif (!options.yes && !alreadyInstalled) {\n\t\tconst response = await confirm({\n\t\t\tmessage: `Add ${ascii.JSREPO} as a dev dependency?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tinstallAsDevDependency = response;\n\t}\n\n\tlet jsonConfig = !noConfig;\n\n\tif (!options.yes && noConfig) {\n\t\tconst response = await confirm({\n\t\t\tmessage: `Create a \\`${color.cyan(REGISTRY_CONFIG_NAME)}\\` file?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(response)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tjsonConfig = response;\n\t}\n\n\tconst pm = (await detect({ cwd: 'cwd' }))?.agent ?? 'npm';\n\n\tlet buildScript = '';\n\n\tif (installAsDevDependency) {\n\t\tbuildScript += 'jsrepo build';\n\t} else {\n\t\tconst command = resolveCommand(pm, 'execute', ['jsrepo', 'build']);\n\n\t\tif (!command) program.error(color.red(`Error resolving execute command for ${pm}`));\n\n\t\tbuildScript += `${command.command} ${command.args.join(' ')} `;\n\t}\n\n\t// if we aren't using a config file configure the command with the correct flags\n\tif (!jsonConfig) {\n\t\tbuildScript += ` --dirs ${config.dirs.join(' ')} `;\n\t}\n\n\t// ensure we are adding to an object that exists\n\tif (pkg.scripts === undefined) {\n\t\tpkg.scripts = {};\n\t}\n\n\tpkg.scripts[options.script] = buildScript;\n\n\tconst tasks: Task[] = [];\n\n\ttasks.push({\n\t\tloadingMessage: `Adding \\`${color.cyan(options.script)}\\` to scripts in package.json`,\n\t\tcompletedMessage: `Added \\`${color.cyan(options.script)}\\` to scripts in package.json`,\n\t\trun: async () => {\n\t\t\ttry {\n\t\t\t\tfs.writeFileSync(packagePath, JSON.stringify(pkg, null, '\\t'));\n\t\t\t} catch (err) {\n\t\t\t\tprogram.error(\n\t\t\t\t\tcolor.red(`Error writing to \\`${color.bold(packagePath)}\\`. Error: ${err}`)\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t});\n\n\tif (jsonConfig) {\n\t\ttasks.push({\n\t\t\tloadingMessage: `Writing config to \\`${color.cyan(REGISTRY_CONFIG_NAME)}\\``,\n\t\t\tcompletedMessage: `Wrote config to \\`${color.cyan(REGISTRY_CONFIG_NAME)}\\``,\n\t\t\trun: async () => {\n\t\t\t\tconst configPath = path.join(options.cwd, REGISTRY_CONFIG_NAME);\n\n\t\t\t\ttry {\n\t\t\t\t\tfs.writeFileSync(path.join(configPath), JSON.stringify(config, null, '\\t'));\n\t\t\t\t} catch (err) {\n\t\t\t\t\tprogram.error(\n\t\t\t\t\t\tcolor.red(`Error writing to \\`${color.bold(configPath)}\\`. Error: ${err}`)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t},\n\t\t});\n\t}\n\n\tawait runTasks(tasks, {});\n\n\tlet installed = alreadyInstalled;\n\n\tif (installAsDevDependency && !alreadyInstalled) {\n\t\tlet shouldInstall = options.yes;\n\t\tif (!options.yes) {\n\t\t\tconst response = await confirm({\n\t\t\t\tmessage: 'Install dependencies?',\n\t\t\t\tinitialValue: true,\n\t\t\t});\n\n\t\t\tif (isCancel(response)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tshouldInstall = response;\n\t\t}\n\n\t\tif (shouldInstall) {\n\t\t\tloading.start(`Installing ${ascii.JSREPO}`);\n\n\t\t\tconst installedResult = await installDependencies({\n\t\t\t\tpm,\n\t\t\t\tdeps: ['jsrepo'],\n\t\t\t\tdev: true,\n\t\t\t\tcwd: options.cwd,\n\t\t\t});\n\n\t\t\tinstalledResult.match(\n\t\t\t\t() => loading.stop(`Installed ${ascii.JSREPO}.`),\n\t\t\t\t(err) => {\n\t\t\t\t\tloading.stop(`Failed to install ${ascii.JSREPO}.`);\n\t\t\t\t\tprogram.error(err);\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tinstalled = true;\n\t\t}\n\t}\n\n\tlet steps: string[] = [];\n\n\tif (!installed && installAsDevDependency) {\n\t\tconst cmd = resolveCommand(pm, 'add', ['jsrepo', '-D']);\n\n\t\tsteps.push(\n\t\t\t`Install ${ascii.JSREPO} as a dev dependency \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t);\n\t}\n\n\tsteps.push(`Add categories to \\`${color.cyan(config.dirs.join(', '))}\\`.`);\n\n\tconst runScript = resolveCommand(pm, 'run', [options.script]);\n\n\tsteps.push(\n\t\t`Run \\`${color.cyan(`${runScript?.command} ${runScript?.args.join(' ')}`)}\\` to build the registry.`\n\t);\n\n\t// put steps with numbers above here\n\tsteps = steps.map((step, i) => `${i + 1}. ${step}`);\n\n\tconst next = nextSteps(steps);\n\n\tprocess.stdout.write(next);\n};\n\nexport { init };\n","import fs from 'node:fs';\nimport { cancel, confirm, isCancel, outro, spinner } from '@clack/prompts';\nimport color from 'chalk';\nimport { Argument, Command, program } from 'commander';\nimport { execa } from 'execa';\nimport { resolveCommand } from 'package-manager-detector/commands';\nimport { detect } from 'package-manager-detector/detect';\nimport path from 'pathe';\nimport { Project } from 'ts-morph';\nimport * as v from 'valibot';\nimport { context } from '../cli';\nimport * as ascii from '../utils/ascii';\nimport { getInstalled } from '../utils/blocks';\nimport * as url from '../utils/blocks/utils/url';\nimport { isTestFile } from '../utils/build';\nimport { getPathForBlock, getProjectConfig, resolvePaths } from '../utils/config';\nimport { intro } from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.object({\n\trepo: v.optional(v.string()),\n\tallow: v.boolean(),\n\tdebug: v.boolean(),\n\tverbose: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst test = new Command('test')\n\t.description('Tests local blocks against most recent remote tests.')\n\t.addArgument(new Argument('[blocks...]', 'The blocks you want to test.').default([]))\n\t.option('--repo <repo>', 'Repository to download the blocks from.')\n\t.option('-A, --allow', 'Allow jsrepo to download code from the provided repo.', false)\n\t.option('--debug', 'Leaves the temp test file around for debugging upon failure.', false)\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (blockNames, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tintro(context);\n\n\t\tawait _test(blockNames, options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _test = async (blockNames: string[], options: Options) => {\n\tconst verbose = (msg: string) => {\n\t\tif (options.verbose) {\n\t\t\tconsole.info(`${ascii.INFO} ${msg}`);\n\t\t}\n\t};\n\n\tverbose(`Attempting to test ${JSON.stringify(blockNames)}`);\n\n\tconst config = getProjectConfig(options.cwd).match(\n\t\t(val) => val,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tconst loading = spinner();\n\n\tlet repoPaths = config.repos;\n\n\t// we just want to override all others if supplied via the CLI\n\tif (options.repo) repoPaths = [options.repo];\n\n\tif (!options.allow && options.repo) {\n\t\tconst result = await confirm({\n\t\t\tmessage: `Allow ${color.cyan('jsrepo')} to download and run code from ${color.cyan(options.repo)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\tif (!options.verbose) loading.start(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst resolvedRepos: registry.RegistryProviderState[] = (\n\t\tawait registry.forEachPathGetProviderState(...repoPaths)\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed to get info for ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tverbose(`Resolved ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst blocksMap: Map<string, registry.RemoteBlock> = (\n\t\tawait registry.fetchBlocks(...resolvedRepos)\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed fetching blocks from ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tverbose(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tif (!options.verbose) loading.stop(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst tempTestDirectory = path.resolve(\n\t\tpath.join(options.cwd, `blocks-tests-temp-${Date.now()}`)\n\t);\n\n\tverbose(`Trying to create the temp directory ${color.bold(tempTestDirectory)}.`);\n\n\tfs.mkdirSync(tempTestDirectory, { recursive: true });\n\n\tconst cleanUp = () => {\n\t\tfs.rmSync(tempTestDirectory, { recursive: true, force: true });\n\t};\n\n\tconst installedBlocks = getInstalled(blocksMap, config, options.cwd).map(\n\t\t(val) => val.specifier\n\t);\n\n\tlet testingBlocks = blockNames;\n\n\t// in the case that we want to test all files\n\tif (blockNames.length === 0) {\n\t\ttestingBlocks = installedBlocks;\n\t}\n\n\tif (testingBlocks.length === 0) {\n\t\tcleanUp();\n\t\tprogram.error(color.red('There were no blocks found in your project!'));\n\t}\n\n\tconst testingBlocksMapped: { name: string; block: registry.RemoteBlock }[] = [];\n\n\tfor (const blockSpecifier of testingBlocks) {\n\t\tlet block: registry.RemoteBlock | undefined = undefined;\n\n\t\tconst provider = registry.selectProvider(blockSpecifier);\n\n\t\t// if the block starts with github (or another provider) we know it has been resolved\n\t\tif (!provider) {\n\t\t\tfor (const repo of repoPaths) {\n\t\t\t\t// we unwrap because we already checked this\n\t\t\t\tconst provider = registry.selectProvider(repo);\n\n\t\t\t\tif (!provider) continue;\n\n\t\t\t\tconst { url: parsedRepo, specifier } = provider.parse(\n\t\t\t\t\turl.join(repo, blockSpecifier),\n\t\t\t\t\t{ fullyQualified: true }\n\t\t\t\t);\n\n\t\t\t\tconst tempBlock = blocksMap.get(url.join(parsedRepo, specifier!));\n\n\t\t\t\tif (tempBlock === undefined) continue;\n\n\t\t\t\tblock = tempBlock;\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tconst { url: repo } = provider.parse(blockSpecifier, { fullyQualified: true });\n\n\t\t\tconst providerState = (await registry.getProviderState(repo)).match(\n\t\t\t\t(val) => val,\n\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t);\n\n\t\t\tconst map = (await registry.fetchBlocks(providerState)).match(\n\t\t\t\t(val) => val,\n\t\t\t\t(err) => program.error(color.red(err))\n\t\t\t);\n\n\t\t\tfor (const [k, v] of map) {\n\t\t\t\tblocksMap.set(k, v);\n\t\t\t}\n\n\t\t\tblock = blocksMap.get(blockSpecifier);\n\t\t}\n\n\t\tif (!block) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(`Invalid block! ${color.bold(blockSpecifier)} does not exist!`)\n\t\t\t);\n\t\t}\n\n\t\ttestingBlocksMapped.push({ name: blockSpecifier, block });\n\t}\n\n\tconst resolvedPathsResult = resolvePaths(config.paths, options.cwd);\n\n\tif (resolvedPathsResult.isErr()) {\n\t\tprogram.error(color.red(resolvedPathsResult.unwrapErr()));\n\t}\n\n\tconst resolvedPaths = resolvedPathsResult.unwrap();\n\n\tfor (const { block } of testingBlocksMapped) {\n\t\tconst providerState = block.sourceRepo;\n\n\t\tconst fullSpecifier = url.join(block.sourceRepo.url, block.category, block.name);\n\n\t\tif (!options.verbose) {\n\t\t\tloading.start(`Setting up test file for ${color.cyan(fullSpecifier)}`);\n\t\t}\n\n\t\tif (!block.tests) {\n\t\t\tloading.stop(`No tests found for ${color.cyan(fullSpecifier)}`);\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet directory = getPathForBlock(block, resolvedPaths, options.cwd);\n\n\t\tdirectory = path.relative(tempTestDirectory, directory);\n\n\t\tconst getSourceFile = async (filePath: string) => {\n\t\t\tconst content = await registry.fetchRaw(providerState, filePath);\n\n\t\t\tif (content.isErr()) {\n\t\t\t\tloading.stop(color.red(`Error fetching ${color.bold(filePath)}`));\n\t\t\t\tprogram.error(color.red(`There was an error trying to get ${fullSpecifier}`));\n\t\t\t}\n\n\t\t\treturn content.unwrap();\n\t\t};\n\n\t\tverbose(`Downloading and copying test files for ${fullSpecifier}`);\n\n\t\tconst testFiles: string[] = [];\n\n\t\tfor (const testFile of block.files.filter((file) => isTestFile(file))) {\n\t\t\tconst content = await getSourceFile(path.join(block.directory, testFile));\n\n\t\t\tconst destPath = path.join(tempTestDirectory, testFile);\n\n\t\t\tfs.writeFileSync(destPath, content);\n\n\t\t\ttestFiles.push(destPath);\n\t\t}\n\n\t\tconst project = new Project();\n\n\t\t// resolve imports for the block\n\t\tfor (const file of testFiles) {\n\t\t\tverbose(`Opening test file ${file}`);\n\n\t\t\tconst tempFile = project.addSourceFileAtPath(file);\n\n\t\t\tfor (const importDeclaration of tempFile.getImportDeclarations()) {\n\t\t\t\tconst moduleSpecifier = importDeclaration.getModuleSpecifierValue();\n\n\t\t\t\tlet newModuleSpecifier: string | undefined = undefined;\n\n\t\t\t\t// if the module is relative resolve it relative to the new path of the tests\n\t\t\t\tif (moduleSpecifier.startsWith('.')) {\n\t\t\t\t\tif (block.subdirectory) {\n\t\t\t\t\t\tnewModuleSpecifier = path.join(directory, block.name, moduleSpecifier);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewModuleSpecifier = path.join(directory, moduleSpecifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (newModuleSpecifier) {\n\t\t\t\t\t// we need to add the replace so that paths are correctly translated on windows\n\t\t\t\t\timportDeclaration.setModuleSpecifier(newModuleSpecifier.replaceAll(/\\\\/g, '/'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tproject.saveSync();\n\n\t\tverbose(`Completed ${color.cyan.bold(fullSpecifier)} test file`);\n\n\t\tif (!options.verbose) {\n\t\t\tloading.stop(`Completed setup for ${color.bold(fullSpecifier)}`);\n\t\t}\n\t}\n\n\tverbose('Beginning testing');\n\n\tconst pm = await detect({ cwd: options.cwd });\n\n\tif (pm == null) {\n\t\tprogram.error(color.red('Could not detect package manager'));\n\t}\n\n\tconst resolved = resolveCommand(pm.agent, 'execute', ['vitest', 'run', tempTestDirectory]);\n\n\tif (resolved == null) {\n\t\tprogram.error(color.red(`Could not resolve add command for '${pm.agent}'.`));\n\t}\n\n\tconst testCommand = `${resolved.command} ${resolved.args.join(' ')}`;\n\n\tverbose(`Running ${color.cyan(testCommand)} on ${color.cyan(options.cwd)}`);\n\n\ttry {\n\t\tawait execa(resolved.command, resolved.args, {\n\t\t\tcwd: options.cwd,\n\t\t\tstdin: process.stdin,\n\t\t\tstdout: process.stdout,\n\t\t});\n\n\t\tcleanUp();\n\t} catch (err) {\n\t\tif (options.debug) {\n\t\t\tconsole.info(\n\t\t\t\t`${color.bold('--debug')} flag provided. Skipping cleanup. Run '${color.bold(\n\t\t\t\t\ttestCommand\n\t\t\t\t)}' to retry tests.\\n`\n\t\t\t);\n\t\t} else {\n\t\t\tcleanUp();\n\t\t}\n\n\t\tprogram.error(color.red(`Tests failed! Error ${err}`));\n\t}\n};\n\nexport { test };\n","import Anthropic from '@anthropic-ai/sdk';\nimport { cancel, isCancel, password, type spinner } from '@clack/prompts';\nimport ollama from 'ollama';\nimport OpenAI from 'openai';\nimport * as lines from './blocks/utils/lines';\nimport * as persisted from './persisted';\n\ntype File = {\n\tpath: string;\n\tcontent: string;\n};\n\nexport interface Model {\n\tupdateFile: (opts: {\n\t\toriginalFile: File;\n\t\tnewFile: File;\n\t\tloading: ReturnType<typeof spinner>;\n\t\tverbose?: (msg: string) => void;\n\t}) => Promise<string>;\n}\n\nexport type ModelName = 'Claude 3.5 Sonnet' | 'ChatGPT 4o-mini' | 'ChatGPT 4o' | 'Phi4';\n\ntype Prompt = {\n\tsystem: string;\n\tmessage: string;\n};\n\nconst models: Record<ModelName, Model> = {\n\t'Claude 3.5 Sonnet': {\n\t\tupdateFile: async ({ originalFile, newFile, loading, verbose }) => {\n\t\t\tconst apiKey = await getApiKey('Anthropic');\n\n\t\t\tif (!verbose) loading.start(`Asking ${'Claude 3.5 Sonnet'}`);\n\n\t\t\tconst prompt = createUpdatePrompt({ originalFile, newFile });\n\n\t\t\tverbose?.(\n\t\t\t\t`Prompting ${'Claude 3.5 Sonnet'} with:\\n${JSON.stringify(prompt, null, '\\t')}`\n\t\t\t);\n\n\t\t\tconst text = await getNextCompletionAnthropic({\n\t\t\t\tmodel: 'claude-3-5-sonnet-latest',\n\t\t\t\tprompt,\n\t\t\t\tapiKey,\n\t\t\t\tmaxTokens: (originalFile.content.length + newFile.content.length) * 2,\n\t\t\t});\n\n\t\t\tif (!verbose) loading.stop(`${'Claude 3.5 Sonnet'} updated the file`);\n\n\t\t\tif (!text) return newFile.content;\n\n\t\t\treturn unwrapCodeFromQuotes(text);\n\t\t},\n\t},\n\t'ChatGPT 4o': {\n\t\tupdateFile: async ({ originalFile, newFile, loading, verbose }) => {\n\t\t\tconst apiKey = await getApiKey('OpenAI');\n\n\t\t\tif (!verbose) loading.start(`Asking ${'ChatGPT 4o'}`);\n\n\t\t\tconst prompt = createUpdatePrompt({ originalFile, newFile });\n\n\t\t\tverbose?.(`Prompting ${'ChatGPT 4o'} with:\\n${JSON.stringify(prompt, null, '\\t')}`);\n\n\t\t\tconst text = await getNextCompletionOpenAI({\n\t\t\t\tmodel: 'gpt-4o',\n\t\t\t\tprompt,\n\t\t\t\tapiKey,\n\t\t\t\tmaxTokens: (originalFile.content.length + newFile.content.length) * 2,\n\t\t\t});\n\n\t\t\tif (!verbose) loading.stop(`${'ChatGPT 4o'} updated the file`);\n\n\t\t\tif (!text) return newFile.content;\n\n\t\t\treturn unwrapCodeFromQuotes(text);\n\t\t},\n\t},\n\t'ChatGPT 4o-mini': {\n\t\tupdateFile: async ({ originalFile, newFile, loading, verbose }) => {\n\t\t\tconst apiKey = await getApiKey('OpenAI');\n\n\t\t\tif (!verbose) loading.start(`Asking ${'ChatGPT 4o-mini'}`);\n\n\t\t\tconst prompt = createUpdatePrompt({ originalFile, newFile });\n\n\t\t\tverbose?.(`Prompting ${'ChatGPT 4o'} with:\\n${JSON.stringify(prompt, null, '\\t')}`);\n\n\t\t\tconst text = await getNextCompletionOpenAI({\n\t\t\t\tmodel: 'gpt-4o-mini',\n\t\t\t\tprompt,\n\t\t\t\tapiKey,\n\t\t\t\tmaxTokens: (originalFile.content.length + newFile.content.length) * 2,\n\t\t\t});\n\n\t\t\tif (!verbose) loading.stop(`${'ChatGPT 4o-mini'} updated the file`);\n\n\t\t\tif (!text) return newFile.content;\n\n\t\t\treturn unwrapCodeFromQuotes(text);\n\t\t},\n\t},\n\tPhi4: {\n\t\tupdateFile: async ({ originalFile, newFile, loading, verbose }) => {\n\t\t\tif (!verbose) loading.start(`Asking ${'Phi4'}`);\n\n\t\t\tconst prompt = createUpdatePrompt({ originalFile, newFile });\n\n\t\t\tverbose?.(`Prompting ${'Phi4'} with:\\n${JSON.stringify(prompt, null, '\\t')}`);\n\n\t\t\tconst text = await getNextCompletionOllama({ model: 'phi4', prompt });\n\n\t\t\tif (!verbose) loading.stop(`${'Phi4'} updated the file`);\n\n\t\t\tif (!text) return newFile.content;\n\n\t\t\treturn unwrapCodeFromQuotes(text);\n\t\t},\n\t},\n};\n\nconst getNextCompletionOpenAI = async ({\n\tprompt,\n\tmaxTokens,\n\tmodel,\n\tapiKey,\n}: {\n\tprompt: Prompt;\n\tmaxTokens: number;\n\tmodel: OpenAI.Chat.ChatModel;\n\tapiKey: string;\n}): Promise<string | null> => {\n\tconst openai = new OpenAI({ apiKey });\n\n\tconst msg = await openai.chat.completions.create({\n\t\tmodel,\n\t\tmax_completion_tokens: maxTokens,\n\t\tmessages: [\n\t\t\t{\n\t\t\t\trole: 'system',\n\t\t\t\tcontent: prompt.system,\n\t\t\t},\n\t\t\t{\n\t\t\t\trole: 'user',\n\t\t\t\tcontent: prompt.message,\n\t\t\t},\n\t\t],\n\t});\n\n\tconst first = msg.choices[0];\n\n\tif (first.message.content === null) return null;\n\n\treturn first.message.content;\n};\n\nconst getNextCompletionAnthropic = async ({\n\tprompt,\n\tmaxTokens,\n\tmodel,\n\tapiKey,\n}: {\n\tprompt: Prompt;\n\tmaxTokens: number;\n\tmodel: Anthropic.Messages.Model;\n\tapiKey: string;\n}): Promise<string | null> => {\n\tconst anthropic = new Anthropic({ apiKey });\n\n\tconst msg = await anthropic.messages.create({\n\t\tmodel,\n\t\tmax_tokens: Math.min(maxTokens, 8192),\n\t\ttemperature: 0.5,\n\t\tsystem: prompt.system,\n\t\tmessages: [\n\t\t\t{\n\t\t\t\trole: 'user',\n\t\t\t\tcontent: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\ttext: prompt.message,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t});\n\n\tconst first = msg.content[0];\n\n\t// if we don't get it in the format you want just return the new file\n\tif (first.type !== 'text') return null;\n\n\treturn first.text;\n};\n\nconst getNextCompletionOllama = async ({\n\tprompt,\n\tmodel,\n}: {\n\tprompt: Prompt;\n\tmodel: string;\n}): Promise<string | null> => {\n\tconst resp = await ollama.chat({\n\t\tmodel,\n\t\tmessages: [\n\t\t\t{\n\t\t\t\trole: 'system',\n\t\t\t\tcontent: prompt.system,\n\t\t\t},\n\t\t\t{\n\t\t\t\trole: 'user',\n\t\t\t\tcontent: prompt.message,\n\t\t\t},\n\t\t],\n\t});\n\n\treturn resp.message.content;\n};\n\nconst createUpdatePrompt = ({\n\toriginalFile,\n\tnewFile,\n}: { originalFile: File; newFile: File }): Prompt => {\n\treturn {\n\t\tsystem: 'You will respond only with the resulting code. DO NOT format the code with markdown, DO NOT put the code inside of triple quotes, only return the code as a raw string.',\n\t\tmessage: `Help me merge these two files. DO NOT make unnecessary changes. \nI expect the original code to maintain the same behavior as it currently has while including any added functionality from the new file.\nThis means stuff like defaults or configuration should normally stay intact unless the new behaviors in the new file depend on those defaults or configuration.\nThis is my current file ${originalFile.path}:\n\\`\\`\\`\n${originalFile.content}\n\\`\\`\\`\n\t\nThis is the file that has changes I want to update with ${newFile.path}:\n\\`\\`\\`\n${newFile.content}\n\\`\\`\\`\n\t`,\n\t};\n};\n\n/** The AI isn't always that smart and likes to wrap the code in quotes even though I beg it not to.\n *  This function attempts to remove the quotes.\n */\nexport const unwrapCodeFromQuotes = (quoted: string): string => {\n\tlet code = quoted.trim();\n\n\tif (code.startsWith('```')) {\n\t\t// takes out the entire first line\n\t\t// this is because often a language will come after the triple quotes\n\t\tcode = lines.get(code).slice(1).join('\\n').trim();\n\t}\n\n\tif (code.endsWith('```')) {\n\t\tconst l = lines.get(code);\n\t\tcode = l\n\t\t\t.slice(0, l.length - 1)\n\t\t\t.join('\\n')\n\t\t\t.trim();\n\t}\n\n\treturn code;\n};\n\n/** Attempts to get the cached api key if it can't it will prompt the user\n *\n * @param name\n * @returns\n */\nconst getApiKey = async (name: 'OpenAI' | 'Anthropic'): Promise<string> => {\n\tconst KEY = `${name}-api-key`;\n\n\tconst storage = persisted.get();\n\n\tlet apiKey = storage.get(KEY, null) as string | null;\n\n\tif (!apiKey) {\n\t\t// prompt for api key\n\t\tconst result = await password({\n\t\t\tmessage: `Paste your ${name} API key:`,\n\t\t\tvalidate(value) {\n\t\t\t\tif (value.trim() === '') return 'Please provide an API key';\n\t\t\t},\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tapiKey = result;\n\t}\n\n\tstorage.set(KEY, apiKey);\n\n\treturn apiKey;\n};\n\nexport { models };\n","/*\n\tjsrepo 1.2.4\n\tInstalled from github/ieedan/std\n\t11-21-2024\n*/\n\n/** Calculates the sum of all elements in the array based on the provided function.\n *\n * @param arr Array of items to be summed.\n * @param fn Summing function\n * @returns\n *\n * ## Examples\n *\n * ```ts\n * const total = arraySum([1, 2, 3, 4, 5], (num) => num);\n *\n * console.log(total); // 15\n * ```\n */\nconst arraySum = <T>(arr: T[], fn: (item: T) => number): number => {\n\tlet total = 0;\n\n\tfor (const item of arr) {\n\t\ttotal = total + fn(item);\n\t}\n\n\treturn total;\n};\n\nexport { arraySum };\n","import color from 'chalk';\nimport { type Change, diffChars } from 'diff';\nimport { arraySum } from './blocks/utils/array-sum';\nimport * as lines from './blocks/utils/lines';\nimport { leftPadMin } from './blocks/utils/pad';\n\ntype Options = {\n\t/** The source file */\n\tfrom: string;\n\t/** The destination file */\n\tto: string;\n\t/** The changes to the file */\n\tchanges: Change[];\n\t/** Expands all lines to show the entire file */\n\texpand: boolean;\n\t/** Maximum lines to show before collapsing */\n\tmaxUnchanged: number;\n\t/** Color the removed lines */\n\tcolorRemoved?: (line: string) => string;\n\t/** Color the added lines */\n\tcolorAdded?: (line: string) => string;\n\t/** Color the removed chars */\n\tcolorCharsRemoved?: (line: string) => string;\n\t/** Color the added chars */\n\tcolorCharsAdded?: (line: string) => string;\n\t/** Prefixes each line with the string returned from this function. */\n\tprefix: () => string;\n\tintro: (options: Options) => string;\n\tonUnchanged: (options: Options) => string;\n};\n\n/** Check if a character is whitespace\n *\n * @param str\n * @returns\n */\nconst isWhitespace = (str: string) => /^\\s+$/g.test(str);\n\n/** We need to add a newline at the end of each change to make sure\n * the next change can start correctly. So we take off just 1.\n *\n * @param str\n * @returns\n */\nconst trimSingleNewLine = (str: string): string => {\n\tlet i = str.length - 1;\n\twhile (isWhitespace(str[i]) && i >= 0) {\n\t\tif (str[i] === '\\n') {\n\t\t\tif (str[i - 1] === '\\r') {\n\t\t\t\treturn str.slice(0, i - 1);\n\t\t\t}\n\n\t\t\treturn str.slice(0, i);\n\t\t}\n\n\t\ti--;\n\t}\n\n\treturn str;\n};\n\nconst formatDiff = ({\n\tfrom,\n\tto,\n\tchanges,\n\texpand = false,\n\tmaxUnchanged = 5,\n\tcolorRemoved = color.redBright,\n\tcolorAdded = color.greenBright,\n\tcolorCharsRemoved = color.bgRedBright,\n\tcolorCharsAdded = color.bgGreenBright,\n\tprefix,\n\tonUnchanged,\n\tintro,\n}: Options): string => {\n\tlet result = '';\n\n\tconst length = arraySum(changes, (change) => change.count ?? 0).toString().length + 1;\n\n\tlet lineOffset = 0;\n\n\tif (changes.length === 1 && !changes[0].added && !changes[0].removed) {\n\t\treturn onUnchanged({\n\t\t\tfrom,\n\t\t\tto,\n\t\t\tchanges,\n\t\t\texpand,\n\t\t\tmaxUnchanged,\n\t\t\tcolorAdded,\n\t\t\tcolorRemoved,\n\t\t\tprefix,\n\t\t\tonUnchanged,\n\t\t\tintro,\n\t\t});\n\t}\n\n\tresult += intro({\n\t\tfrom,\n\t\tto,\n\t\tchanges,\n\t\texpand,\n\t\tmaxUnchanged,\n\t\tcolorAdded,\n\t\tcolorRemoved,\n\t\tprefix,\n\t\tonUnchanged,\n\t\tintro,\n\t});\n\n\t/** Provides the line number prefix */\n\tconst linePrefix = (line: number): string =>\n\t\tcolor.gray(`${prefix?.() ?? ''}${leftPadMin(`${line + 1 + lineOffset} `, length)} `);\n\n\tfor (let i = 0; i < changes.length; i++) {\n\t\tconst change = changes[i];\n\n\t\tconst hasPreviousChange = changes[i - 1]?.added || changes[i - 1]?.removed;\n\t\tconst hasNextChange = changes[i + 1]?.added || changes[i + 1]?.removed;\n\n\t\tif (!change.added && !change.removed) {\n\t\t\t// show collapsed\n\t\t\tif (!expand && change.count !== undefined && change.count > maxUnchanged) {\n\t\t\t\tconst prevLineOffset = lineOffset;\n\t\t\t\tconst ls = lines.get(trimSingleNewLine(change.value));\n\n\t\t\t\tlet shownLines = 0;\n\n\t\t\t\tif (hasNextChange) shownLines += maxUnchanged;\n\t\t\t\tif (hasPreviousChange) shownLines += maxUnchanged;\n\n\t\t\t\t// just show all if we are going to show more than we have\n\t\t\t\tif (shownLines >= ls.length) {\n\t\t\t\t\tresult += `${lines.join(ls, {\n\t\t\t\t\t\tprefix: linePrefix,\n\t\t\t\t\t})}\\n`;\n\t\t\t\t\tlineOffset += ls.length;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// this writes the top few lines\n\t\t\t\tif (hasPreviousChange) {\n\t\t\t\t\tresult += `${lines.join(ls.slice(0, maxUnchanged), {\n\t\t\t\t\t\tprefix: linePrefix,\n\t\t\t\t\t})}\\n`;\n\t\t\t\t}\n\n\t\t\t\tif (ls.length > shownLines) {\n\t\t\t\t\tconst count = ls.length - shownLines;\n\t\t\t\t\tresult += `${lines.join(\n\t\t\t\t\t\tlines.get(\n\t\t\t\t\t\t\tcolor.gray(\n\t\t\t\t\t\t\t\t`+ ${count} more unchanged (${color.italic('-E to expand')})`\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprefix: () => `${prefix?.() ?? ''}${leftPadMin(' ', length)} `,\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\\n`;\n\t\t\t\t}\n\n\t\t\t\tif (hasNextChange) {\n\t\t\t\t\tlineOffset = lineOffset + ls.length - maxUnchanged;\n\t\t\t\t\tresult += `${lines.join(ls.slice(ls.length - maxUnchanged), {\n\t\t\t\t\t\tprefix: linePrefix,\n\t\t\t\t\t})}\\n`;\n\t\t\t\t}\n\n\t\t\t\t// resets the line offset\n\t\t\t\tlineOffset = prevLineOffset + change.count;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// show expanded\n\n\t\t\tresult += `${lines.join(lines.get(trimSingleNewLine(change.value)), {\n\t\t\t\tprefix: linePrefix,\n\t\t\t})}\\n`;\n\t\t\tlineOffset += change.count ?? 0;\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst colorLineChange = (change: Change) => {\n\t\t\tif (change.added) {\n\t\t\t\treturn colorAdded(trimSingleNewLine(change.value));\n\t\t\t}\n\n\t\t\tif (change.removed) {\n\t\t\t\treturn colorRemoved(trimSingleNewLine(change.value));\n\t\t\t}\n\n\t\t\treturn change.value;\n\t\t};\n\n\t\tconst colorCharChange = (change: Change) => {\n\t\t\tif (change.added) {\n\t\t\t\treturn colorCharsAdded(trimSingleNewLine(change.value));\n\t\t\t}\n\n\t\t\tif (change.removed) {\n\t\t\t\treturn colorCharsRemoved(trimSingleNewLine(change.value));\n\t\t\t}\n\n\t\t\treturn change.value;\n\t\t};\n\n\t\tif (\n\t\t\tchange.removed &&\n\t\t\tchange.count === 1 &&\n\t\t\tchanges[i + 1]?.added &&\n\t\t\tchanges[i + 1]?.count === 1\n\t\t) {\n\t\t\t// single line change\n\t\t\tconst diffedChars = diffChars(change.value, changes[i + 1].value);\n\n\t\t\tconst sentence = diffedChars.map((chg) => colorCharChange(chg)).join('');\n\n\t\t\tresult += `${linePrefix(0)}${sentence}`;\n\n\t\t\tlineOffset += 1;\n\n\t\t\ti++;\n\t\t} else {\n\t\t\tif (isWhitespace(change.value)) {\n\t\t\t\t// adds some spaces to make sure that you can see the change\n\t\t\t\tresult += `${lines.join(lines.get(colorCharChange(change)), {\n\t\t\t\t\tprefix: (line) =>\n\t\t\t\t\t\t`${linePrefix(line)}${colorCharChange({ removed: true, value: '   ', added: false })}`,\n\t\t\t\t})}\\n`;\n\n\t\t\t\tif (!change.removed) {\n\t\t\t\t\tlineOffset += change.count ?? 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult += `${lines.join(lines.get(colorLineChange(change)), {\n\t\t\t\t\tprefix: linePrefix,\n\t\t\t\t})}\\n`;\n\n\t\t\t\tif (!change.removed) {\n\t\t\t\t\tlineOffset += change.count ?? 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n};\n\nexport { formatDiff };\n","import fs from 'node:fs';\nimport {\n\tcancel,\n\tconfirm,\n\tisCancel,\n\tlog,\n\tmultiselect,\n\toutro,\n\tselect,\n\tspinner,\n} from '@clack/prompts';\nimport color from 'chalk';\nimport { Command, program } from 'commander';\nimport { diffLines } from 'diff';\nimport { resolveCommand } from 'package-manager-detector/commands';\nimport { detect } from 'package-manager-detector/detect';\nimport path from 'pathe';\nimport * as v from 'valibot';\nimport { context } from '../cli';\nimport { type ModelName, models } from '../utils/ai';\nimport * as ascii from '../utils/ascii';\nimport { getInstalled, resolveTree } from '../utils/blocks';\nimport * as url from '../utils/blocks/utils/url';\nimport { isTestFile } from '../utils/build';\nimport { getPathForBlock, getProjectConfig, resolvePaths } from '../utils/config';\nimport { installDependencies } from '../utils/dependencies';\nimport { formatDiff } from '../utils/diff';\nimport { formatFile, transformRemoteContent } from '../utils/files';\nimport { loadFormatterConfig } from '../utils/format';\nimport { getWatermark } from '../utils/get-watermark';\nimport { returnShouldInstall } from '../utils/package';\nimport { type Task, intro, nextSteps, runTasks } from '../utils/prompts';\nimport * as registry from '../utils/registry-providers/internal';\n\nconst schema = v.object({\n\tall: v.boolean(),\n\texpand: v.boolean(),\n\tmaxUnchanged: v.number(),\n\tno: v.boolean(),\n\trepo: v.optional(v.string()),\n\tallow: v.boolean(),\n\tyes: v.boolean(),\n\tverbose: v.boolean(),\n\tcwd: v.string(),\n});\n\ntype Options = v.InferInput<typeof schema>;\n\nconst update = new Command('update')\n\t.description('Update blocks to the code in the remote repository.')\n\t.argument('[blocks...]', 'Names of the blocks you want to update. ex: (utils/math)')\n\t.option('--all', 'Update all installed components.', false)\n\t.option('-E, --expand', 'Expands the diff so you see everything.', false)\n\t.option(\n\t\t'--max-unchanged <number>',\n\t\t'Maximum unchanged lines that will show without being collapsed.',\n\t\t(val) => Number.parseInt(val), // this is such a dumb api thing\n\t\t3\n\t)\n\t.option('-n, --no', 'Do update any blocks.', false)\n\t.option('--repo <repo>', 'Repository to download the blocks from.')\n\t.option('-A, --allow', 'Allow jsrepo to download code from the provided repo.', false)\n\t.option('-y, --yes', 'Skip confirmation prompt.', false)\n\t.option('--verbose', 'Include debug logs.', false)\n\t.option('--cwd <path>', 'The current working directory.', process.cwd())\n\t.action(async (blockNames, opts) => {\n\t\tconst options = v.parse(schema, opts);\n\n\t\tintro(context);\n\n\t\tawait _update(blockNames, options);\n\n\t\toutro(color.green('All done!'));\n\t});\n\nconst _update = async (blockNames: string[], options: Options) => {\n\tconst verbose = (msg: string) => {\n\t\tif (options.verbose) {\n\t\t\tconsole.info(`${ascii.INFO} ${msg}`);\n\t\t}\n\t};\n\n\tverbose(`Attempting to update ${JSON.stringify(blockNames)}`);\n\n\tconst loading = spinner();\n\n\tconst config = getProjectConfig(options.cwd).match(\n\t\t(val) => val,\n\t\t(err) => program.error(color.red(err))\n\t);\n\n\tlet repoPaths = config.repos;\n\n\t// we just want to override all others if supplied via the CLI\n\tif (options.repo) repoPaths = [options.repo];\n\n\t// ensure blocks do not provide repos\n\tfor (const blockSpecifier of blockNames) {\n\t\tif (registry.providers.find((p) => blockSpecifier.startsWith(p.name))) {\n\t\t\tprogram.error(\n\t\t\t\tcolor.red(\n\t\t\t\t\t`Invalid value provided for block names \\`${color.bold(blockSpecifier)}\\`. Block names are expected to be provided in the format of \\`${color.bold('<category>/<name>')}\\``\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\tif (!options.allow && options.repo) {\n\t\tconst result = await confirm({\n\t\t\tmessage: `Allow ${color.cyan('jsrepo')} to download and run code from ${color.cyan(options.repo)}?`,\n\t\t\tinitialValue: true,\n\t\t});\n\n\t\tif (isCancel(result) || !result) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\t}\n\n\tverbose(`Resolving ${color.cyan(repoPaths.join(', '))}`);\n\n\tif (!options.verbose) loading.start(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst resolvedRepos: registry.RegistryProviderState[] = (\n\t\tawait registry.forEachPathGetProviderState(...repoPaths)\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed to get info for ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tverbose(`Resolved ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Fetching blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst blocksMap: Map<string, registry.RemoteBlock> = (\n\t\tawait registry.fetchBlocks(...resolvedRepos)\n\t).match(\n\t\t(val) => val,\n\t\t({ repo, message }) => {\n\t\t\tloading.stop(`Failed fetching blocks from ${color.cyan(repo)}`);\n\t\t\tprogram.error(color.red(message));\n\t\t}\n\t);\n\n\tif (!options.verbose) loading.stop(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tverbose(`Retrieved blocks from ${color.cyan(repoPaths.join(', '))}`);\n\n\tconst installedBlocks = getInstalled(blocksMap, config, options.cwd);\n\n\tif (installedBlocks.length === 0) {\n\t\tprogram.error(\n\t\t\tcolor.red(\n\t\t\t\t`You haven't installed any blocks yet. Did you mean to \\`${color.bold('add')}\\`?`\n\t\t\t)\n\t\t);\n\t}\n\n\tlet updatingBlockNames = blockNames;\n\n\tif (options.all) {\n\t\tupdatingBlockNames = installedBlocks.map((block) => block.specifier);\n\t}\n\n\t// if no blocks are provided prompt the user for what blocks they want\n\tif (updatingBlockNames.length === 0) {\n\t\tconst promptResult = await multiselect({\n\t\t\tmessage: `Which blocks would you like to ${options.no ? 'diff' : 'update'}?`,\n\t\t\toptions: installedBlocks\n\t\t\t\t.filter((b) => b.block.list)\n\t\t\t\t.map((block) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tlabel: `${color.cyan(block.block.category)}/${block.block.name}`,\n\t\t\t\t\t\tvalue: block.specifier,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\trequired: true,\n\t\t});\n\n\t\tif (isCancel(promptResult)) {\n\t\t\tcancel('Canceled!');\n\t\t\tprocess.exit(0);\n\t\t}\n\n\t\tupdatingBlockNames = promptResult as string[];\n\t}\n\n\tverbose(`Preparing to update ${color.cyan(updatingBlockNames.join(', '))}`);\n\n\tconst updatingBlocks = (await resolveTree(updatingBlockNames, blocksMap, resolvedRepos)).match(\n\t\t(val) => val,\n\t\tprogram.error\n\t);\n\n\tconst pm = (await detect({ cwd: options.cwd }))?.agent ?? 'npm';\n\n\tconst tasks: Task[] = [];\n\n\tlet devDeps: Set<string> = new Set<string>();\n\tlet deps: Set<string> = new Set<string>();\n\n\tconst { prettierOptions, biomeOptions } = await loadFormatterConfig({\n\t\tformatter: config.formatter,\n\t\tcwd: options.cwd,\n\t});\n\n\tconst resolvedPathsResult = resolvePaths(config.paths, options.cwd);\n\n\tif (resolvedPathsResult.isErr()) {\n\t\tprogram.error(color.red(resolvedPathsResult.unwrapErr()));\n\t}\n\n\tconst resolvedPaths = resolvedPathsResult.unwrap();\n\n\tlet model: ModelName = 'Claude 3.5 Sonnet';\n\n\tfor (const { block } of updatingBlocks) {\n\t\tconst fullSpecifier = url.join(block.sourceRepo.url, block.category, block.name);\n\n\t\tconst watermark = getWatermark(context.package.version, block.sourceRepo.url);\n\n\t\tconst providerState = block.sourceRepo;\n\n\t\tverbose(`Attempting to add ${fullSpecifier}`);\n\n\t\tconst directory = getPathForBlock(block, resolvedPaths, options.cwd);\n\n\t\tconst files: { content: string; destPath: string; fileName: string }[] = [];\n\n\t\tconst getSourceFile = async (filePath: string) => {\n\t\t\tconst content = await registry.fetchRaw(providerState, filePath, {\n\t\t\t\tverbose,\n\t\t\t});\n\n\t\t\tif (content.isErr()) {\n\t\t\t\tloading.stop(color.red(`Error fetching ${color.bold(filePath)}`));\n\t\t\t\tprogram.error(color.red(`There was an error trying to get ${fullSpecifier}`));\n\t\t\t}\n\n\t\t\treturn content.unwrap();\n\t\t};\n\n\t\tfor (const sourceFile of block.files) {\n\t\t\tif (!config.includeTests && isTestFile(sourceFile)) continue;\n\n\t\t\tconst sourcePath = path.join(block.directory, sourceFile);\n\n\t\t\tlet destPath: string;\n\t\t\tif (block.subdirectory) {\n\t\t\t\tdestPath = path.join(directory, block.name, sourceFile);\n\t\t\t} else {\n\t\t\t\tdestPath = path.join(directory, sourceFile);\n\t\t\t}\n\n\t\t\tconst content = await getSourceFile(sourcePath);\n\n\t\t\tfs.mkdirSync(destPath.slice(0, destPath.length - sourceFile.length), {\n\t\t\t\trecursive: true,\n\t\t\t});\n\n\t\t\tfiles.push({ content, destPath, fileName: sourceFile });\n\t\t}\n\n\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\n\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}  ${fullSpecifier}\\n`);\n\n\t\tfor (const file of files) {\n\t\t\tconst remoteContentResult = await transformRemoteContent({\n\t\t\t\tfile,\n\t\t\t\tbiomeOptions,\n\t\t\t\tprettierOptions,\n\t\t\t\tconfig,\n\t\t\t\timports: block._imports_,\n\t\t\t\twatermark,\n\t\t\t\tverbose,\n\t\t\t\tcwd: options.cwd,\n\t\t\t});\n\n\t\t\tif (remoteContentResult.isErr()) {\n\t\t\t\tprogram.error(color.red(remoteContentResult.unwrapErr()));\n\t\t\t}\n\n\t\t\tconst originalRemoteContent = remoteContentResult.unwrap();\n\n\t\t\tlet remoteContent = remoteContentResult.unwrap();\n\n\t\t\tlet acceptedChanges = options.yes;\n\n\t\t\tif (!options.yes) {\n\t\t\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\n\t\t\t\tlet localContent = '';\n\t\t\t\tif (fs.existsSync(file.destPath)) {\n\t\t\t\t\tlocalContent = fs.readFileSync(file.destPath).toString();\n\t\t\t\t}\n\n\t\t\t\tconst from = url.join(providerState.url, file.fileName);\n\n\t\t\t\tconst to = path.relative(options.cwd, file.destPath);\n\n\t\t\t\twhile (true) {\n\t\t\t\t\tconst changes = diffLines(localContent, remoteContent);\n\n\t\t\t\t\t// print diff\n\t\t\t\t\tconst formattedDiff = formatDiff({\n\t\t\t\t\t\tfrom,\n\t\t\t\t\t\tto,\n\t\t\t\t\t\tchanges,\n\t\t\t\t\t\texpand: options.expand,\n\t\t\t\t\t\tmaxUnchanged: options.maxUnchanged,\n\t\t\t\t\t\tprefix: () => `${ascii.VERTICAL_LINE}  `,\n\t\t\t\t\t\tonUnchanged: ({ from, to, prefix }) =>\n\t\t\t\t\t\t\t`${prefix?.() ?? ''}${color.cyan(from)} → ${color.gray(to)} ${color.gray('(unchanged)')}\\n`,\n\t\t\t\t\t\tintro: ({ from, to, changes, prefix }) => {\n\t\t\t\t\t\t\tconst totalChanges = changes.filter((a) => a.added || a.removed).length;\n\n\t\t\t\t\t\t\treturn `${prefix?.() ?? ''}${color.cyan(from)} → ${color.gray(to)} (${totalChanges} change${\n\t\t\t\t\t\t\t\ttotalChanges === 1 ? '' : 's'\n\t\t\t\t\t\t\t})\\n${prefix?.() ?? ''}\\n`;\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tprocess.stdout.write(formattedDiff);\n\n\t\t\t\t\t// if there are no changes then don't ask\n\t\t\t\t\tif (changes.length > 1 || localContent === '') {\n\t\t\t\t\t\tacceptedChanges = options.yes;\n\n\t\t\t\t\t\tif (!options.yes && !options.no) {\n\t\t\t\t\t\t\t// prompt the user\n\t\t\t\t\t\t\tconst confirmResult = await select({\n\t\t\t\t\t\t\t\tmessage: 'Accept changes?',\n\t\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'Accept',\n\t\t\t\t\t\t\t\t\t\tvalue: 'accept',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: 'Reject',\n\t\t\t\t\t\t\t\t\t\tvalue: 'reject',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tlabel: `✨ ${color.yellow('Update with AI')} ✨`,\n\t\t\t\t\t\t\t\t\t\tvalue: 'update',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (isCancel(confirmResult)) {\n\t\t\t\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\t\t\t\tprocess.exit(0);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (confirmResult === 'update') {\n\t\t\t\t\t\t\t\t// prompt for model\n\t\t\t\t\t\t\t\tconst modelResult = await select({\n\t\t\t\t\t\t\t\t\tmessage: 'Select a model',\n\t\t\t\t\t\t\t\t\toptions: Object.keys(models).map((key) => ({\n\t\t\t\t\t\t\t\t\t\tlabel: key,\n\t\t\t\t\t\t\t\t\t\tvalue: key,\n\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tif (isCancel(modelResult)) {\n\t\t\t\t\t\t\t\t\tcancel('Canceled!');\n\t\t\t\t\t\t\t\t\tprocess.exit(0);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tmodel = modelResult as ModelName;\n\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tremoteContent = await models[model].updateFile({\n\t\t\t\t\t\t\t\t\t\toriginalFile: {\n\t\t\t\t\t\t\t\t\t\t\tcontent: localContent,\n\t\t\t\t\t\t\t\t\t\t\tpath: to,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tnewFile: {\n\t\t\t\t\t\t\t\t\t\t\tcontent: originalRemoteContent,\n\t\t\t\t\t\t\t\t\t\t\tpath: from,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tloading,\n\t\t\t\t\t\t\t\t\t\tverbose: options.verbose ? verbose : undefined,\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\t\tloading.stop();\n\t\t\t\t\t\t\t\t\tlog.error(color.red(`Error getting completions: ${err}`));\n\t\t\t\t\t\t\t\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tremoteContent = await formatFile({\n\t\t\t\t\t\t\t\t\tfile: {\n\t\t\t\t\t\t\t\t\t\tcontent: remoteContent,\n\t\t\t\t\t\t\t\t\t\tdestPath: file.destPath,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tbiomeOptions,\n\t\t\t\t\t\t\t\t\tprettierOptions,\n\t\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tprocess.stdout.write(`${ascii.VERTICAL_LINE}\\n`);\n\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tacceptedChanges = confirmResult === 'accept';\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak; // there were no changes or changes were automatically accepted\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (acceptedChanges) {\n\t\t\t\tawait runTasks(\n\t\t\t\t\t[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tloadingMessage: `Writing changes to ${color.cyan(file.destPath)}`,\n\t\t\t\t\t\t\tcompletedMessage: `Wrote changes to ${color.cyan(file.destPath)}.`,\n\t\t\t\t\t\t\trun: async () => fs.writeFileSync(file.destPath, remoteContent),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t\t{\n\t\t\t\t\t\tverbose: options.verbose ? verbose : undefined,\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (config.includeTests && block.tests) {\n\t\t\tverbose('Trying to include tests');\n\n\t\t\tconst { devDependencies } = JSON.parse(\n\t\t\t\tfs.readFileSync(path.join(options.cwd, 'package.json')).toString()\n\t\t\t);\n\n\t\t\tif (devDependencies === undefined || devDependencies.vitest === undefined) {\n\t\t\t\tdevDeps.add('vitest');\n\t\t\t}\n\t\t}\n\n\t\tfor (const dep of block.devDependencies) {\n\t\t\tdevDeps.add(dep);\n\t\t}\n\n\t\tfor (const dep of block.dependencies) {\n\t\t\tdeps.add(dep);\n\t\t}\n\t}\n\n\tawait runTasks(tasks, { verbose: options.verbose ? verbose : undefined });\n\n\t// check if dependencies are already installed\n\tconst requiredDependencies = returnShouldInstall(deps, devDeps, { cwd: options.cwd });\n\n\tdeps = requiredDependencies.dependencies;\n\tdevDeps = requiredDependencies.devDependencies;\n\n\tconst hasDependencies = deps.size > 0 || devDeps.size > 0;\n\n\tif (hasDependencies) {\n\t\tlet install = options.yes;\n\t\tif (!options.yes && !options.no) {\n\t\t\tconst result = await confirm({\n\t\t\t\tmessage: 'Would you like to install dependencies?',\n\t\t\t\tinitialValue: true,\n\t\t\t});\n\n\t\t\tif (isCancel(result)) {\n\t\t\t\tcancel('Canceled!');\n\t\t\t\tprocess.exit(0);\n\t\t\t}\n\n\t\t\tinstall = result;\n\t\t}\n\n\t\tif (install) {\n\t\t\tif (deps.size > 0) {\n\t\t\t\tif (!options.verbose)\n\t\t\t\t\tloading.start(`Installing dependencies with ${color.cyan(pm)}`);\n\n\t\t\t\t(\n\t\t\t\t\tawait installDependencies({\n\t\t\t\t\t\tpm,\n\t\t\t\t\t\tdeps: Array.from(deps),\n\t\t\t\t\t\tdev: false,\n\t\t\t\t\t\tcwd: options.cwd,\n\t\t\t\t\t})\n\t\t\t\t).match(\n\t\t\t\t\t(installed) => {\n\t\t\t\t\t\tif (!options.verbose)\n\t\t\t\t\t\t\tloading.stop(`Installed ${color.cyan(installed.join(', '))}`);\n\t\t\t\t\t},\n\t\t\t\t\t(err) => {\n\t\t\t\t\t\tif (!options.verbose) loading.stop('Failed to install dependencies');\n\n\t\t\t\t\t\tprogram.error(err);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (devDeps.size > 0) {\n\t\t\t\tif (!options.verbose)\n\t\t\t\t\tloading.start(`Installing dependencies with ${color.cyan(pm)}`);\n\n\t\t\t\t(\n\t\t\t\t\tawait installDependencies({\n\t\t\t\t\t\tpm,\n\t\t\t\t\t\tdeps: Array.from(devDeps),\n\t\t\t\t\t\tdev: true,\n\t\t\t\t\t\tcwd: options.cwd,\n\t\t\t\t\t})\n\t\t\t\t).match(\n\t\t\t\t\t(installed) => {\n\t\t\t\t\t\tif (!options.verbose)\n\t\t\t\t\t\t\tloading.stop(`Installed ${color.cyan(installed.join(', '))}`);\n\t\t\t\t\t},\n\t\t\t\t\t(err) => {\n\t\t\t\t\t\tif (!options.verbose) loading.stop('Failed to install dev dependencies');\n\n\t\t\t\t\t\tprogram.error(err);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// next steps if they didn't install dependencies\n\t\tlet steps = [];\n\n\t\tif (!install) {\n\t\t\tif (deps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...deps]);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (devDeps.size > 0) {\n\t\t\t\tconst cmd = resolveCommand(pm, 'add', [...devDeps, '-D']);\n\n\t\t\t\tsteps.push(\n\t\t\t\t\t`Install dev dependencies \\`${color.cyan(`${cmd?.command} ${cmd?.args.join(' ')}`)}\\``\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// put steps with numbers above here\n\t\tsteps = steps.map((step, i) => `${i + 1}. ${step}`);\n\n\t\tif (!install) {\n\t\t\tsteps.push('');\n\t\t}\n\n\t\tsteps.push('Import and use the blocks!');\n\n\t\tconst next = nextSteps(steps);\n\n\t\tprocess.stdout.write(next);\n\t}\n};\n\nexport { update };\n","import nodeFetch from 'node-fetch';\nimport { Err, Ok, type Result } from './blocks/types/result';\nimport type { Package } from './parse-package-name';\nimport * as persisted from './persisted';\n\nconst LATEST_VERSION_KEY = 'latest-version';\nconst EXPIRATION_TIME = 60 * 60 * 1000; // 1 hour\n\ntype LatestVersion = {\n\texpiration: number;\n\tversion: string;\n};\n\n/** Checks for the latest version from the github repository. Will cache results for up to 1 hour. */\nexport const getLatestVersion = async (): Promise<Result<string, string>> => {\n\ttry {\n\t\t// handle caching\n\t\tconst storage = persisted.get();\n\n\t\tlet version: string;\n\n\t\tconst latestVersion = storage.get(LATEST_VERSION_KEY) as LatestVersion | null;\n\n\t\tif (latestVersion) {\n\t\t\tif (latestVersion.expiration > Date.now()) {\n\t\t\t\tversion = latestVersion.version;\n\n\t\t\t\treturn Ok(version);\n\t\t\t}\n\n\t\t\tstorage.delete(LATEST_VERSION_KEY);\n\t\t}\n\n\t\t// we abort the request after a second\n\t\t// because it really just isn't worth it if it's going to take that long\n\t\tconst controller = new AbortController();\n\n\t\tconst timeout = setTimeout(() => {\n\t\t\tcontroller.abort();\n\t\t}, 1000);\n\n\t\tconst response = await nodeFetch(\n\t\t\t'https://raw.githubusercontent.com/ieedan/jsrepo/refs/heads/main/packages/cli/package.json',\n\t\t\t{\n\t\t\t\tsignal: controller.signal,\n\t\t\t}\n\t\t);\n\n\t\tclearTimeout(timeout);\n\n\t\tif (!response.ok) {\n\t\t\treturn Err('Error getting version');\n\t\t}\n\n\t\tconst { version: ver } = (await response.json()) as Package;\n\n\t\tversion = ver;\n\n\t\tstorage.set(LATEST_VERSION_KEY, {\n\t\t\texpiration: Date.now() + EXPIRATION_TIME,\n\t\t\tversion,\n\t\t} satisfies LatestVersion);\n\n\t\treturn Ok(version);\n\t} catch (err) {\n\t\treturn Err(`Error getting version: ${err}`);\n\t}\n};\n","import fs from 'node:fs';\nimport { fileURLToPath } from 'node:url';\nimport { program } from 'commander';\nimport path from 'pathe';\nimport * as commands from './commands';\nimport type { CLIContext } from './utils/context';\nimport { getLatestVersion } from './utils/get-latest-version';\n\nconst resolveRelativeToRoot = (p: string): string => {\n\tconst dirname = fileURLToPath(import.meta.url);\n\treturn path.join(dirname, '../..', p);\n};\n\n// get version from package.json\nconst { version, name, description, repository } = JSON.parse(\n\tfs.readFileSync(resolveRelativeToRoot('package.json'), 'utf-8')\n);\n\nconst latestVersion = (await getLatestVersion()).match(\n\t(val) => val,\n\t() => undefined\n);\n\nconst context: CLIContext = {\n\tpackage: {\n\t\tname,\n\t\tdescription,\n\t\tversion,\n\t\trepository,\n\t\tlatestVersion,\n\t},\n\tresolveRelativeToRoot,\n};\n\nconst cli = program\n\t.name(name)\n\t.description(description)\n\t.version(version)\n\t.addCommand(commands.add)\n\t.addCommand(commands.auth)\n\t.addCommand(commands.build)\n\t.addCommand(commands.exec)\n\t.addCommand(commands.init)\n\t.addCommand(commands.test)\n\t.addCommand(commands.update);\n\nexport { cli, context };\n","#!/usr/bin/env node\n\nimport { cli } from './cli';\n\ncli.parse();\n"]}